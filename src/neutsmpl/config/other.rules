/* $Id: other.rules,v 1.1.1.1 2016/11/04 20:29:56 mdunkman Exp $
 * 
 * Targets to help build files for things that arn't compilers.
 *    (yacc, lex, &c).
 *
 * $Log: other.rules,v $
 * Revision 1.1.1.1  2016/11/04 20:29:56  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.5  1998/06/18 23:14:31  skuci
 * Added "Fh2hNamedIncludeTarget".
 * Added removing of target include file in case fh2h fails,
 * otherwise incomplete header file stays and gets installed
 * if problem is fixed and make command is repeated without
 * doing make clean first.
 * --Tomasz.
 *
 * Revision 1.4  1998/05/27 04:01:02  tomba
 * Made input file of fh2h an argument instead of stdin.
 *
 * Revision 1.3  1998/05/26 07:55:18  tomba
 * Added fh2h support. --Tomasz
 *
 * Revision 1.2  1997/08/26 03:42:33  mcgrew
 * Changes to compile on the alpha.
 *
 * Revision 1.1  1997/06/10 18:04:35  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 */

XCOMM -------------------------------------------------------
XCOMM -------------------------------------------------------
XCOMM Rules for other types of files.
XCOMM -------------------------------------------------------
XCOMM -------------------------------------------------------

#ifndef LexFile
#define LexFile(file,sym,def)						@@\
file.lex.c: file.l							@@\
	$(LEX) -t file.l | sed s/yy/sym/g | sed s/YY/def/g > file.lex.c	@@\
									@@\
clean::									@@\
	RemoveFiles(file.lex.c)
#endif /* LexFile */

#ifndef YaccFile
#define YaccFile(file,flags,sym,def)					@@\
file.tab.h file.tab.c: file.y						@@\
	$(YACC) -d flags file.y						@@\
	cat y.tab.c | sed s/yy/sym/g | sed s/YY/def/g > file.tab.c	@@\
	cat y.tab.h | sed s/yy/sym/g | sed s/YY/def/g > file.tab.h	@@\
	$(RM) y.tab.c y.tab.h						@@\
									@@\
clean::									@@\
	RemoveFiles(y.tab.c y.tab.h file.h file.c)
#endif /* YaccFile */

#ifndef MakeHFromIDL
#define MakeHFromIDL(name,flags)					@@\
									@@\
interfaces:: name.h							@@\
									@@\
name.h: name.idl							@@\
	@RemoveFile(name.h)						@@\
	$(CPP) $(CXXDEFINES) name.idl | \				@@\
	$(IXX) $(IXXFLAGS) $(IXXINCLUDES) -file name.idl flags > name.h
#endif /* MakeHFromIDL */

/*
 * LinkFile - link a file
 */
#ifndef LinkFile
#define LinkFile(tofile,fromfile)					@@\
tofile:: fromfile							@@\
	RemoveFile($@)							@@\
	$(LN) $? $@							@@\
									@@\
includes:: tofile							@@\
									@@\
depend:: tofile								@@\
									@@\
clean::									@@\
	RemoveFile(tofile)
#endif

/*
 * LintLibraryTarget - generate rules to create a lint library.  Note that the
 * lint library is always forced to be newer than the library itself.
 */
#ifndef LintLibraryTarget
#define	LintLibraryTarget(libname,srclist)				@@\
lintlib:: Concat(llib-l,libname.ln)					@@\
									@@\
Concat(llib-l,libname.ln): srclist					@@\
	RemoveFile($@)							@@\
	$(LINT) Concat($(LINTLIBFLAG),libname) $(LINTFLAGS) srclist
#endif /* LintLibraryTarget */


/*
 * NormalLintTarget - generate rules to lint a set of sources.
 */
#ifndef NormalLintTarget
#define NormalLintTarget(srclist)					@@\
lint:									@@\
	$(LINT) $(LINTFLAGS) srclist $(LINTLIBS)			@@\
lint1:									@@\
	$(LINT) $(LINTFLAGS) $(FILE) $(LINTLIBS)
#endif /* NormalLintTarget */


/*
 * LintTarget - generate rules to lint $(SRCS)
 */
#ifndef LintTarget
#define LintTarget()							@@\
NormalLintTarget($(SRCS))
#endif


/*
 * CppScriptTarget - generate rules to create a shell script by running the
 * input through cpp.  If the ExecableScripts configuration parameter is not
 * set, then make sure that the first line begins with a colon.
 */
#ifndef CppScriptTarget
#if ExecableScripts		/* can use #! instead of colon */
#define CppScriptTarget(dst,src,defs,deplist)\
									@@\
dst::  src deplist							@@\
	RemoveFile($@)							@@\
	$(CPP) defs <src | CppSedMagic >$@				@@\
	chmod a+x $@							@@\
									@@\
clean::									@@\
	RemoveFile(dst)
#else
#define CppScriptTarget(dst,src,defs,deplist)\
									@@\
dst::  src deplist							@@\
	RemoveFile($@)							@@\
	echo \: >$@							@@\
	sed '1d' src | $(CPP) defs | CppSedMagic >>$@			@@\
	chmod a+x $@							@@\
									@@\
clean::									@@\
	RemoveFile(dst)
#endif /* ExecableScripts */
#endif /* CppScriptTarget */


/*
 * MakeScriptFromCpp - generate rules to create a script from a file with a
 * .cpp suffix.
 */
#ifndef MakeScriptFromCpp
#define MakeScriptFromCpp(name,defs)\
									@@\
CppScriptTarget(name,name.cpp,defs,NullParameter)
#endif /* MakeScriptFromCpp */

#ifndef CppFileTarget
#define CppFileTarget(dst,src,defs,deplist)\
									@@\
dst::  src deplist							@@\
	RemoveFile($@)							@@\
	$(CPP) defs <src | CppSedMagic >$@				@@\
									@@\
clean::									@@\
	RemoveFiles(dst)
#endif /* CppFileTarget */

/*
 * MakeDirectories - generate rules to create a hierarchy of directories.
 */
#ifndef MakeDirectories
#define MakeDirectories(step,dirs)\
									@@\
step::									@@\
	@case '${MFLAGS}' in *[i]*) set +e;; esac;			@@\
	DirFailPrefix@for i in dirs; do if [ -d $(DESTDIR)$$i ]; then \	@@\
		set +x; else (set -x; $(MKDIRHIER) $(DESTDIR)$$i); fi \	@@\
	done
#endif /* MakeDirectories */

XCOMM -------------------------------------------------------------
XCOMM Define rules for kuipc
XCOMM
#ifndef CDFRule
#define CDFRule()\
		                                                        @@\
.SUFFIXES: .cdf                                                         @@\
                                                                        @@\
.cdf.c:									@@\
	$(KUIPC) $< $(@F)
#endif

#if HasKUIPC
CDFRule()
#endif

XCOMM -------------------------------------------------------------
XCOMM  Define the rules to make the include files from the *.ch files.
XCOMM

#ifndef NormalCIncludeRule
#define NormalCIncludeRule()\
									@@\
.SUFFIXES: .ch .h							@@\
									@@\
%.h: %.ch								@@\
	chgen -h $*.ch > $*.h
#endif

#ifndef NormalFHIncludeRule
#define NormalFHIncludeRule()\
									@@\
.SUFFIXES: .ch .fh							@@\
									@@\
%.fh: %.ch								@@\
	chgen -F $*.ch > $*.fh
#endif

#if HasCHGEN
XCOMM Rules to build CHGEN include files.
NormalCIncludeRule()
NormalFHIncludeRule()
#endif

/*
 * Make the include files.
 */
#ifndef NormalIncludeTarget
#define NormalIncludeTarget(inc)\
									@@\
inc:									@@\
									@@\
includes:: inc 								@@\
									@@\
clean::									@@\
	RemoveFiles(inc)
#endif

/*
 * Make C include files out of Fortran include files.
 */
#ifndef Fh2hNamedIncludeTarget
#define Fh2hNamedIncludeTarget(f_header,c_header)\
									@@\
c_header: f_header							@@\
	fh2h.pl	f_header > c_header || (RemoveFile(c_header);exit 1)	@@\
									@@\
includes:: c_header							@@\
									@@\
clean::									@@\
	RemoveFiles(c_header)
#endif
#ifndef Fh2hIncludeTarget
#define Fh2hIncludeTarget(inc) Fh2hNamedIncludeTarget(inc.h,Concat(inc,C.h))
#endif

XCOMM  GF. Add rules and target for gmake style of checking dependencies
XCOMM   950817
#ifndef CheckDependRules
#define CheckDependRules()\
									@@\
.SUFFIXES: .d								@@\
									@@\
%.d: %.c								@@\
	$(SHELL) -ec "gcc -M $(ALLDEFINES) $< \  			@@\
                      | sed 's/^[ ]*$*\.o/& $@/g' >$@"			@@\
									@@\
%.d: %.F								@@\
	$(TOUCH) $@.tmp							@@\
	$(SHELL) -ec 'makedepend -f$@.tmp  -- $(ALLDEFINES) $<'		@@\
	$(SHELL) -ec sed 's/^[ ]*$*\.o/& $@/g' $@.tmp >$@		@@\
	RemoveFiles( $@.tmp* )
#endif
CheckDependRules()

/* 
 * CleanFilesTarget - generate rules to remove specific files.
 */
#ifndef CleanFilesTarget
#define	CleanFilesTarget(files)						@@\
clean::									@@\
	RemoveFiles( files )
#endif /* CleanFilesTarget */

/*
 * CleanTarget - generate rules to remove any garbage files
 */
#ifndef CleanTarget
#define	CleanTarget()							@@\
CleanFilesTarget( FilesToClean ExtraFilesToClean "#"* )			@@\
									@@\
clean::									@@\
	LibCleanDir($(OBJPREFIX))					@@\
									@@\
ProofCleanTarget()
#endif /* CleanTarget */


/*
 * TagsTarget - generate rules to compute tags files for C source code.
 */
#ifndef TagsTarget
#define	TagsTarget()							@@\
tags::									@@\
	$(TAGS) -w *.[ch]						@@\
	$(TAGS) -xw *.[ch] > TAGS
#endif /* TagsTarget */


/* TestTarget
 *  create a targets to link and run tests. 
 *
 */
#ifndef TestTarget
#define TestTarget(program,data,inputdata) \				@@\
.PHONY: test								@@\
									@@\
ifeq ($(strip inputdata),)						@@\
test:: ProgramTargetName(program) data inputdata			@@\
	@echo Testing $(PACKAGE_NAME)					@@\
	@echo "  ... using" program						@@\
	@./ProgramTargetName(program)					@@\
									@@\
else									@@\
test:: ProgramTargetName(program) data inputdata			@@\
	@echo Testing $(PACKAGE_NAME)					@@\
	@echo "  ... using" program					@@\
	@./ProgramTargetName(program) < inputdata			@@\
									@@\
endif									@@\
									@@\
clean::									@@\
	RemoveFile(ProgramTargetName(program))				@@\
	RemoveFiles(core *.log data inputdata)
#endif

