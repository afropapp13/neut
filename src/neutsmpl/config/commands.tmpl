/*
 * $Id: commands.tmpl,v 1.1.1.1 2016/11/04 20:29:55 mdunkman Exp $
 *
 * $Log: commands.tmpl,v $
 * Revision 1.1.1.1  2016/11/04 20:29:55  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.32  1999/07/22 18:23:58  mcgrew
 * Major cleanup of the linux definitions.  Much of the stuff that was in
 * site.def, but belonged in linux.cf has been moved there.  I've also
 * added the Linux distributions as vendors so that Linux looks a lot
 * more like the unixen.
 *
 * Revision 1.31  1999/04/16 06:27:10  mcgrew
 * After much agonized soul searching, I've added -Wno-unused to the gcc
 * command definitions.  This prevents warnings for unused variables and
 * static functions.  Normally an unused variable is a bad thing and
 * should be fixed, but cfortran generates so many unused warnings that
 * it is hiding the real errors.
 *
 * Revision 1.30  1999/03/25 05:48:55  mcgrew
 * Add a missing endif and add block end comments.
 *
 * Revision 1.29  1999/03/25 05:28:10  mcgrew
 * Add options to the g77 compile to match cernlib.
 *
 * Revision 1.28  1999/03/23 08:18:29  sharkey
 * Define the C compiler to be "egcc" rather than "gcc" if UseEgcs is defined
 * in the site.def.  Define UseEgcs in the kek.def and linux-fortran.def if
 * a DEBIAN is defined.
 *
 * There is still one hardcoded reference to gcc in other.rules that I don't
 * know how to get rid of.  Hopefully it's harmless.
 *
 * Revision 1.27  1999/03/23 07:26:22  mcgrew
 * Make sure that commands passed in on the imake_boot command line get
 * passed to all subsequent imake commands.
 *
 * Revision 1.26  1999/02/28 05:39:49  sharkey
 * Make "make clean" remove shared as well as static libraries.
 *
 * Revision 1.25  1999/01/31 01:44:51  mcgrew
 * Enable passing the command line and package defines through a make
 * Makefile command.
 *
 * Revision 1.24  1999/01/31 01:22:49  mcgrew
 * Add Package and Project .def files that are loaded immediately after
 * the site.def files and before the defaults.tmpl file.  This lets the
 * Package and Project override variables used to define the rules.
 * The Package and Project files are the only files that should be
 * changed in the config directories to customise for a particular
 * library or experiment.
 *
 * Revision 1.23  1999/01/29 09:06:54  tomba
 * Fixed spelling ifnef -> ifndef.
 *
 * Revision 1.22  1999/01/29 01:43:49  mcgrew
 * The MKDIR command should be defined as a variable so that it can be
 * overridden in a Makefile.  It is now.
 *
 * Revision 1.21  1998/04/02 22:17:07  skrep
 * Add fixs to work with f2c.
 *
 * Revision 1.20  1998/03/10 18:16:03  superk
 * I took -g out of the c++ command.  the -g should be in CXXDEBUGFLAGS
 *
 * Revision 1.19  1998/01/06 21:13:03  mcgrew
 * Remove the MFLAGS and MAKEFLAGS cruft.  This was included to work
 * around different "make" behaviours, but we now require GNUmake and it
 * "does the right thing".
 *
 * Revision 1.18  1997/08/29 19:18:09  superk
 * Fixed bug with a comma causing cpp to confuse number of arguments. --Tomasz
 *
 */

XCOMM Force the shell.
#ifndef BourneShell			/* to force shell in makefile */
#define BourneShell		/bin/sh
#endif
            SHELL = BourneShell

XCOMM Define the AR command.
#ifndef ArCmdBase
#define ArCmdBase ar
#endif
#ifndef ArCmd
#if HasLargeTmp || SystemV4
#define ArCmd ArCmdBase cq
#else
#define ArCmd ArCmdBase clq
#endif
#endif
#ifndef ArAddCmd
#if HasLargeTmp || SystemV4
#define ArAddCmd ArCmdBase ru
#else
#define ArAddCmd ArCmdBase rul
#endif
#endif
#ifndef ArExtCmd
#if HasLargeTmp || SystemV4
#define ArExtCmd ArCmdBase x
#else
#define ArExtCmd ArCmdBase xl
#endif
#endif
                AR = ArCmd


XCOMM Define the XARGS command.
#ifndef XargsCmd
#define XargsCmd xargs
#endif
#if defined(UseXargs) && UseXargs
	    XARGS = XargsCmd
#endif

XCOMM The cpp command
#ifndef CppCmd
#define CppCmd /lib/cpp
#endif
              CPP = CppCmd $(STD_CPP_DEFINES)		/* simple filters */

XCOMM Define the C compiler.
#ifndef CcCmd
#if defined(UseEgcs) && UseEgcs
#define CcCmd egcc -fpcc-struct-return -Wall -Wno-unused -g
#else
#if HasGcc2
#define CcCmd gcc -fPIC -fpcc-struct-return -Wall -Wno-unused -g
#else
#if HasGcc
#define CcCmd gcc -fPIC -fstrength-reduce -fpcc-struct-return -Wall -Wno-unused -g
#else
#if HasCenterLineC
#define CcCmd clcc
#else
#if HasApogee
#define CcCmd apcc
#define ExperimentCCDefines        -DEXPERIMENT_QFAPOGEE
#define EXPERIMENT_QFAPOGEE
#else
#if HasEPC
#define CcCmd ecc
#define ExperimentCCDefines        -DEXPERIMENT_QFEPC
#define EXPERIMENT_QFEPC
#else
#define CcCmd cc
#endif /* HasEPC */
#endif /* HasApogee */
#endif /* HasCenterLineC */
#endif /* HasGcc */
#endif /* HasGcc2 */
#endif /* HasEgcs */
#endif /* CcCmd */
#ifndef OptimizedCDebugFlags
#define OptimizedCDebugFlags -O
#endif
#ifndef OptimizedCplusplusDebugFlags
#define OptimizedCplusplusDebugFlags OptimizedCDebugFlags
#endif
#ifndef DebuggableCDebugFlags
#define DebuggableCDebugFlags -g
#endif
#ifndef DebuggableCplusplusDebugFlags
#define DebuggableCplusplusDebugFlags DebuggableCDebugFlags
#endif
#ifndef ProfiledCDebugFlags
#define ProfiledCDebugFlags -pg
#endif
#ifndef ProfiledCplusplusDebugFlags
#define ProfiledCplusplusDebugFlags ProfiledCDebugFlags
#endif
#ifndef NoOpCDebugFlags
#define NoOpCDebugFlags /**/
#endif
#ifndef DefaultCDebugFlags
#define DefaultCDebugFlags OptimizedCDebugFlags
#endif
#ifndef CcAnsiMode
#define CcAnsiMode /**/
#endif
#ifndef CcStrictAnsiMode
#define CcStrictAnsiMode /**/
#endif
#ifndef DefaultCCOptions
#define DefaultCCOptions /* floating point, etc. */
#endif
#ifndef PassCDebugFlags
#define PassCDebugFlags  
#endif
               CC = CcCmd
ifeq ($(strip $(CDEBUGFLAGS)),)
      CDEBUGFLAGS = DefaultCDebugFlags
endif
        CCOPTIONS = DefaultCCOptions	/* to distinguish from param flags */
#if !HasVoidSignalReturn
   SIGNAL_DEFINES = -DSIGNALRETURNSINT
#endif

XCOMM The C++ definitions.
#ifndef CplusplusCmd
#if HasGcc2ForCplusplus
#define CplusplusCmd g++ -Wall 
#else
#define CplusplusCmd CC
#endif
#endif
#ifndef CplusplusStandardDefines
#define CplusplusStandardDefines StandardDefines
#endif
#ifndef CplusplusExtraDefines
#define CplusplusExtraDefines /**/
#endif
#ifndef CplusplusExtraIncludes
#define CplusplusExtraIncludes /**/
#endif
#ifndef CplusplusDependIncludes
#define CplusplusDependIncludes /**/
#endif
#ifndef CplusplusOptions
#define CplusplusOptions -fPIC /**/
#endif
#ifndef CplusplusSpecialOptions
#define CplusplusSpecialOptions /**/
#endif
#ifndef DefaultCplusplusDebugFlags
#define DefaultCplusplusDebugFlags OptimizedCplusplusDebugFlags
#endif
#ifndef DefaultCplusplusOptions
#define DefaultCplusplusOptions -fPIC /* floating point, etc. */
#endif
#ifndef NoRConst
#define NoRConst NO /* YES if const for structs of funcs is bad */
#endif
#if HasCplusplus

.SUFFIXES: .CCsuf

              CXX = CplusplusCmd
    CXXDEBUGFLAGS = DefaultCplusplusDebugFlags
 CXXEXTRA_DEFINES = CplusplusExtraDefines
CXXEXTRA_INCLUDES = CplusplusExtraIncludes
  CXXIDL_INCLUDES = -I$(TOP)/include
   CXXSTD_DEFINES = CplusplusStandardDefines
       CXXOPTIONS = CplusplusOptions
      CXXINCLUDES = $(INCLUDES) $(TOP_INCLUDES) $(CXXEXTRA_INCLUDES) $(CXXIDL_INCLUDES) 
       CXXDEFINES = $(CXXINCLUDES) $(CXXSTD_DEFINES) $(THREADS_CXXDEFINES) $(CXXEXTRA_DEFINES)
         CXXFLAGS = $(CXXDEBUGFLAGS) $(CXXOPTIONS) $(THREADS_CXXFLAGS) $(CXXDEFINES)
#endif

XCOMM Here we set up flags needed to produce position-independent code 
XCOMM when doing C and C++ compilation.  The default if you specify C
XCOMM PIC flags without also specifying C++ PIC flags is to assume that 
XCOMM the C flags work for both.  If your C++ compiler requires different
XCOMM flags, specify them explicitly in PositionIndependentCplusplusFlags.
#if HasSharedLibraries
    SHAREDCODEDEF = SharedCodeDef
         SHLIBDEF = SharedLibraryDef
#  ifdef SharedLibraryLoadFlags
     SHLIBLDFLAGS = SharedLibraryLoadFlags
#  endif
#  ifdef PositionIndependentCFlags
         PICFLAGS = PositionIndependentCFlags
#  endif
#  ifdef PositionIndependentCplusplusFlags
      CXXPICFLAGS = PositionIndependentCplusplusFlags
#  else
#    ifdef PositionIndependentCFlags
      CXXPICFLAGS = PositionIndependentCFlags
#    endif
#  endif
#  ifdef PositionIndependentFortranFlags
      PIFFLAGS = PositionIndependentFortranFlags
#  else
#    ifdef PositionIndependentCFlags
      PIFFLAGS = PositionIndependentCFlags
#    endif
#  endif
#endif

XCOMM The fortran compiler.
#if HasFortran
#ifndef FortranCmd
#if HasApogee
#define FortranCmd apf77
#define ExperimentFCDefines        ExperimentCCDefines        
#else
#if HasEPC
#define FortranCmd epcf90
#define ExperimentFCDefines        ExperimentCCDefines        
#else
#define FortranCmd f77
#endif
#endif
#endif
#ifndef FortranCppCmd
#define FortranCppCmd CppCmd
#endif
#ifndef FortranFlags
#define FortranFlags /**/
#endif
#ifndef FortranLoadFlags	/* flags to add when using the Fortran driver as a loader */
#define FortranLoadFlags /**/
#endif
#ifndef FortranSaveFlags	/* flags to compile with SAVEing all variables*/
#define FortranSaveFlags /**/
#endif
#ifndef FortranNoSaveFlags	/* flags to turn OFF SAVEing all variables */
#define FortranNoSaveFlags /**/
#endif
#ifndef OptimisedFortranFlags	/* flag to optimise */
#define OptimisedFortranFlags -O -g
#endif
#ifndef DebuggableFortranDebugFlags	/* flags to turn on debugging info */
#define DebuggableFortranDebugFlags -g -O0 -Wall
#endif
#ifndef NoOpFortranDebugFlags	/* flags NOT to turn on optimisation or debug*/
#define NoOpFortranDebugFlags /**/
#endif
#ifndef DefaultFCOptions	/* for default options like +ppu.. */
#define DefaultFCOptions /**/
#endif
#ifndef FortranDebugFlags	/* flags to turn on debug and/or optimasatio */
#define FortranDebugFlags OptimisedFortranFlags 
/* #define FortranDebugFlags DebuggableFortranDebugFlags  */
#endif
#ifndef FortranLinkCmd
#define FortranLinkCmd FortranCmd
#endif
#ifndef FortranLibraries
#define FortranLibraries /**/
#endif
#ifndef ExperimentFCDefines
#define ExperimentFCDefines /**/
#endif
               FC = FortranCmd
              FPP = FortranCppCmd
      FDEBUGFLAGS = FortranDebugFlags 
FORTRANSAVEOPTION = FortranSaveFlags
   FORTRANOPTIONS = DefaultFCOptions $(FORTRANSAVEOPTION)
           FCLINK = FortranLinkCmd
  FORTRANLIBRARIES = FortranLibraries
   FORTRANDEFINES = ExperimentFCDefines
FORTRANALLDEFMDEPEND = $(FORTRANINCLUDES) \
			$(FORTRANDEFINES) \
			$(ALLDEFINES)

#ifdef AIXArchitecture
  FORTRANALLDEFINES = $(foreach def,$(FORTRANALLDEFMDEPEND),-WF,$(def))
#else
  FORTRANALLDEFINES = $(FORTRANALLDEFMDEPEND)
#endif

#if FortranDoesCpp
          FCFLAGS = $(FDEBUGFLAGS) $(FCOPTIONS) $(FORTRANOPTIONS) $(FORTRANALLDEFINES)
#else
          FCFLAGS = $(FDEBUGFLAGS) $(FCOPTIONS) $(FORTRANOPTIONS)
#endif
#endif /* HasFortran */

#ifndef UNCOMPRESSPATH
#define UNCOMPRESSPATH /usr/ucb/uncompress
#endif

XCOMM The assembler.
#ifndef AsCmd
#define AsCmd as
#endif
               AS = AsCmd

XCOMM The compress command.
#ifndef CompressCmd
#define CompressCmd compress
#endif
         COMPRESS = CompressCmd

XCOMM The preprocessor command.
#ifndef PreProcessCmd
#define PreProcessCmd CcCmd -E
#endif
    PREPROCESSCMD = PreProcessCmd $(STD_CPP_DEFINES)	/* prefered; mdep */

XCOMM The set of normal CPP defines.
#ifndef StandardDefines
#if SystemV
#define StandardDefines -DSYSV
#else
#if SystemV4
#define StandardDefines -DSVR4
#else
#define StandardDefines /**/
#endif
#endif
#endif
#ifndef StandardCppDefines
#define StandardCppDefines StandardDefines
#endif
#ifndef NdbmDefines
#if HasNdbm
#define NdbmDefines -DNDBM
#else
#define NdbmDefines /**/
#endif
#endif
#ifndef ExperimentCCDefines
#define ExperimentCCDefines /**/
#endif
        CCDEFINES = ExperimentCCDefines

XCOMM The include files paths and nessary "special" files.
#ifndef StandardIncludes	/* for platform-specifics */
#define StandardIncludes /**/
#endif
#ifndef MotifIncludes
#define MotifIncludes	/**/
#endif
#ifndef X11Includes
#define X11Includes	/**/
#endif
     STD_INCLUDES = StandardIncludes
  STD_CPP_DEFINES = StandardCppDefines
      STD_DEFINES = StandardDefines

XCOMM The commands to make include files
#if HasCHGEN
#ifndef ChgenCmd
#define ChgenCmd chgen
#endif
	CHGEN = ChgenCmd
#endif

#if HasInc2h
#ifndef Inc2hCmd
#define Inc2hCmd inc2h
#endif
	INC2H = Inc2hCmd
#endif

XCOMM The commands to run kuip
#if HasKUIPC
#  ifndef KuipcCmd 
#    define  KuipcCmd kuipc
#  endif
        KUIPC = KuipcCmd
#endif

XCOMM The command to install files.
#ifndef InstallCmd
#  if SystemV || SystemV4 || YES
#    define InstallCmd $(SHELL) $(CONFIGSRC)/install-sh 
#  else
#    define InstallCmd install
#  endif
#endif
#ifndef InstallFlags
#define InstallFlags -c
#endif
#ifndef InstPgmFlags
#define InstPgmFlags -s
#endif
#ifndef InstBinFlags
#define InstBinFlags -m 0755
#endif
#ifndef InstUidFlags
#define InstUidFlags -m 4755
#endif
#ifndef InstLibFlags
#define InstLibFlags -m 0644
#endif
#ifndef InstIncFlags
#define InstIncFlags -m 0444
#endif
#ifndef InstManFlags
#define InstManFlags -m 0444
#endif
#ifndef InstDatFlags
#define InstDatFlags -m 0444
#endif
#ifndef InstKmemFlags     /* put -g kmem -m 2755 in site.def... */
#define InstKmemFlags InstUidFlags
#endif
          INSTALL = InstallCmd
     INSTALLFLAGS = InstallFlags
#if StripInstalledPrograms
     INSTPGMFLAGS = InstPgmFlags	/* install flags for stripping */
#else
     INSTPGMFLAGS = 
#endif
     INSTBINFLAGS = InstBinFlags	/* install flags for programs */
     INSTUIDFLAGS = InstUidFlags	/* install flags for setuid programs */
     INSTLIBFLAGS = InstLibFlags	/* install flags for libraries */
     INSTINCFLAGS = InstIncFlags	/* install flags for headers */
     INSTMANFLAGS = InstManFlags	/* install flags for man pages */
     INSTDATFLAGS = InstDatFlags	/* install flags for data files */
    INSTKMEMFLAGS = InstKmemFlags	/* install flags for /dev/kmem progs */

XCOMM The loader command.  This links programs.
#ifndef LdCmd
#define LdCmd ld
#endif
               LD = LdCmd

XCOMM The load options.
#ifndef LdPreLib
#if !defined(UseInstalled)
#define LdPreLib -L$(BUILDLIBDIR)
#else
#if AlternateUsrLibDir
#define LdPreLib -L$(USRLIBDIR)
#else
#define LdPreLib /**/
#endif
#endif
#endif
#ifndef LdPostLib
#if !defined(UseInstalled) && AlternateUsrLibDir && !HasLdRunPath
#define LdPostLib -L$(USRLIBDIR)
#else
#define LdPostLib /**/
#endif
#endif
#ifndef MathLibrary
#define MathLibrary -lm
#endif
#ifndef DBMLibrary
#define DBMLibrary -ldbm
#endif
#ifndef ExtraLibraries
#if SystemV4
#if HasSockets
#define ExtraLibraries -lsocket -lnsl -lw
#else
#define ExtraLibraries -lnsl -lw
#endif
#else
#define ExtraLibraries /**/
#endif
#endif
#ifndef ExtraLoadOptions
#define ExtraLoadOptions /**/
#endif
#ifndef ExtraLoadFlags
#define ExtraLoadFlags /**/
#endif
#ifndef LdCombineFlags
#if SystemV4
#define LdCombineFlags -r
#else
#define LdCombineFlags -X -r
#endif
#endif
#ifndef LdStripFlags
#define LdStripFlags -x
#endif
         LDPRELIB = LdPreLib
        LDPOSTLIB = LdPostLib
 EXTRA_LOAD_FLAGS = ExtraLoadFlags
  EXTRA_LDOPTIONS = ExtraLoadOptions
  EXTRA_LIBRARIES = $(FORTRANLIBRARIES) ExtraLibraries Krb5Libraries
     LDSTRIPFLAGS = LdStripFlags
   LDCOMBINEFLAGS = LdCombineFlags

XCOMM The lex command.
#ifndef LexCmd
#define LexCmd lex
#endif
#ifndef LexLib
#define LexLib -ll
#endif
              LEX = LexCmd
           LEXLIB = LexLib

XCOMM The yacc command
#ifndef YaccCmd
#define YaccCmd yacc
#endif
#ifndef YaccLib
#define YaccLib -ly
#endif
#ifndef CplusplusYaccCmd
#define CplusplusYaccCmd YaccCmd
#endif
             YACC = YaccCmd
          YACCLIB = YaccLib
           CCYACC = CplusplusYaccCmd

XCOMM The lint command for those that must.
#ifndef LintCmd
#define LintCmd lint
#endif
#ifndef LintLibFlag
#if SystemV || SystemV4
#define LintLibFlag -o
#else
#define LintLibFlag -C
#endif
#endif
#ifndef LintOpts
#if SystemV || SystemV4
#define LintOpts -bh
#else
#define LintOpts -axz
#endif
#endif
#ifndef LintlibDir
#define LintlibDir $(USRLIBDIR)/lint
#endif
             LINT = LintCmd
      LINTLIBFLAG = LintLibFlag
         LINTOPTS = LintOpts
       LINTLIBDIR = LintlibDir		/* lint libraries */

XCOMM The copy command.
#ifndef CpCmd
#define CpCmd cp
#endif
               CP = CpCmd

XCOMM The command to make a link.  Can also be cp instead of ln.
#ifndef HasSymLinks
#define HasSymLinks YES
#endif
#ifndef LnCmd /* can use cp instead of ln if necessary */
#if HasSymLinks
#define LnCmd ln -s
#else
#define LnCmd ln
#endif
#endif
               LN = LnCmd

XCOMM The make command.
#ifndef MakeCmd
#define MakeCmd gmake
#endif
             MAKE = MakeCmd

XCOMM The command to move a file.
#ifndef MvCmd
#define MvCmd mv
#endif
               MV = MvCmd

XCOMM The command to run ranlib (if it is necessary).
#if DoRanlibCmd
#ifndef RanlibCmd
#define RanlibCmd ranlib
#endif
#ifndef RanlibInstFlags
#define RanlibInstFlags /**/
#endif
           RANLIB = RanlibCmd
  RANLIBINSTFLAGS = RanlibInstFlags
#endif

XCOMM The touch command
#ifndef TouchCmd
#define TouchCmd touch
#endif
            TOUCH = TouchCmd		/* to touch a file */

XCOMM The remove command and the files to clean.
#ifndef RmCmd
#define RmCmd rm -f
#endif
#ifndef ExtraFilesToClean
#define ExtraFilesToClean /**/
#endif
#ifndef FilesToClean
#define FilesToClean *.CKP *.ln *.BAK *.bak *.Osuf core errs ','* *~ *.a .emacs_* tags TAGS make.log MakeOut *.so *.so.*
#endif
               RM = RmCmd
           RM_CMD = $(RM)

XCOMM The command to run the stream editor.
#ifndef SedCmd
#define SedCmd sed
#endif
              SED = SedCmd

XCOMM The command to run the tr command.
#ifndef TrCmd
#  define TrCmd tr
#endif
               TR = TrCmd

XCOMM The command to generate tags.
#ifndef TagsCmd
#define TagsCmd ctags
#endif
             TAGS = TagsCmd

XCOMM The command to run Imake.
#ifndef ImakeCmd
#ifdef UseInstalled		/* assume BINDIR in path */
#define ImakeCmd imake
#else
#define ImakeCmd $(IMAKESRC)/imake
#endif
#endif
ifeq "$(strip $(IMAKE))" ""
            IMAKE = ImakeCmd
endif
XCOMM These are for command line or Imakefile use.
    IMAKE_DEFINES = -DCMDLINE="$(COMMAND_LINE)" $(COMMAND_LINE)
    IMAKE_INCLUDES= /* blank, for command line or Imakefile use */


XCOMM Where to search for the config files.  This provides ways to
XCOMM override the default config files.  The package can override the
XCOMM config files by using ./config or $(TOP)/config.  The user can
XCOMM override the package config files by using "." or
XCOMM "$(HOME)/config".  Everything can be overriden by using
XCOMM $(IMAKE_INCLUDES) 
    IMAKE_PATHS = $(IMAKE_INCLUDES) $(BOOT_INCLUDES) \
	-I. -I$(HOME)/config \
	-I./config -I$(TOP) -I$(TOP)/config \
	-I$(IRULESRC) 

XCOMM Build the default imake command.
#ifdef UseInstalled
         IRULESRC = $(CONFIGDIR)	/* used in rules file */
        IMAKE_CMD = $(IMAKE) -DUseInstalled -DLocalTop=$(LOCALTOP) \
			UseImakeCompilerSelect \
			$(IMAKE_PATHS) $(BOOT_DEFINES) $(IMAKE_DEFINES)
#else
         IRULESRC = $(CONFIGSRC)/cf
        IMAKE_CMD = $(IMAKE) $(IMAKE_PATHS) $(BOOT_DEFINES) $(IMAKE_DEFINES) 
#endif

XCOMM Funky definition left over from the original Imake
XCOMM distribution.  Needed if these config files ever have to build the
XCOMM imake executable.
  BOOTSTRAPCFLAGS = BootstrapCFlags	/* set if cpp does not have uniq sym */

XCOMM The command to build the depends.
#ifndef DependCmd
#ifdef UseInstalled		/* assume BINDIR in path */
#define DependCmd makedepend
#else
#define DependCmd $(DEPENDSRC)/makedepend
#endif
#endif
#ifndef DependFlags
#define DependFlags -p$(OBJPREFIX)
#endif
ifeq "$(strip $(MAKEDEPEND))" ""
           DEPEND = DependCmd
else
	   DEPEND = $(MAKEDEPEND)
endif
      DEPENDFLAGS = DependFlags

#ifndef IxxCmd
#ifdef UseInstalled
#define IxxCmd ixx		/* assume BINDIR in path */
#else
#define IxxCmd $(IXXSRC)/ixx
#endif
#endif
#ifndef IxxFlags
#define IxxFlags -s BaseObject -m TypeObj -r RequestObj -p Xf
#endif
#ifndef IxxIncludes
#define IxxIncludes -i '<X11/Fresco/enter-scope.h>'
#endif
           IXXSRC = $(UNSUPPORTEDSRC)/programs/ixx
              IXX = IxxCmd
         IXXFLAGS = IxxFlags
      IXXINCLUDES = IxxIncludes

#ifndef MkdirHierCmd
#ifdef UseInstalled		/* assume BINDIR in path */
#define MkdirHierCmd mkdirhier
#else
#define MkdirHierCmd $(SHELL) $(CONFIGSRC)/util/mkdirhier.sh
#endif
#endif
        MKDIRHIER = MkdirHierCmd

#ifndef MkdirCmd
#define MkdirCmd mkdir -p
#endif
	MKDIR = MkdirCmd

#ifndef TroffCmd
#define TroffCmd psroff
#endif
#ifndef MsMacros
#define MsMacros -ms
#endif
#ifndef TblCmd
#define TblCmd tbl
#endif
#ifndef EqnCmd
#define EqnCmd eqn
#endif
            TROFF = TroffCmd
         MSMACROS = MsMacros
              TBL = TblCmd
              EQN = EqnCmd

#ifndef DvipsCmd
#define DvipsCmd dvips
#endif
#ifndef LatexCmd
#define LatexCmd latex
#endif
#if HasLatex
            DVIPS = DvipsCmd
            LATEX = LatexCmd
#endif


#if HasSentinel
#ifndef SentinelCmd
#define SentinelCmd sentinel
#endif
#ifndef SentinelOptions
#define SentinelOptions /**/
#endif
#endif
#if HasSentinel
         SENTINEL = SentinelCmd
  SENTINELOPTIONS = SentinelOptions
#endif

#if HasPurify
#ifndef PurifyCmd
#define PurifyCmd purify
#endif
#ifndef PurifyOptions
#define PurifyOptions /**/
#endif
#endif
#if HasPurify
           PURIFY = PurifyCmd
    PURIFYOPTIONS = PurifyOptions
#endif

#if HasTestCenter
#ifndef ProofCmd
#define ProofCmd proof
#endif
#ifndef ProofOptions
#define ProofOptions /**/
#endif
#endif
#if HasTestCenter
           PROOF = ProofCmd
    PROOFOPTIONS = ProofOptions
#endif

XCOMM Specify how to link C and C++
#ifndef CCLinkCmd
#  define CCLinkCmd $(CC)
#endif
           CCLINK = CCLinkCmd

#if AlternateUsrLibDir && HasLdRunPath
      CXXENVSETUP = LD_RUN_PATH=$(USRLIBDIR)
          CXXLINK = $(CXXENVSETUP) $(CXX)
#else
          CXXLINK = $(CXX)
#endif

