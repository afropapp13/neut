/* $Id: biglib.rules,v 1.1.1.1 2016/11/04 20:29:55 mdunkman Exp $
 *
 * $Log: biglib.rules,v $
 * Revision 1.1.1.1  2016/11/04 20:29:55  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.5  1999/01/29 01:43:48  mcgrew
 * The MKDIR command should be defined as a variable so that it can be
 * overridden in a Makefile.  It is now.
 *
 * Revision 1.4  1997/05/27 15:55:28  mcgrew
 * Add patches to keep compadible with the K2K config files.
 *
 * Revision 1.3  1997/05/17 08:13:07  mcgrew
 * Fixes to work at KEK on pnahp
 *
 * Revision 1.2  1997/04/27 05:05:51  mcgrew
 * partially adapted to SK
 *
 * Revision 1.1.1.1  1997/04/26 08:45:49  mcgrew
 * import config files
 *
 * Revision 1.1  1995/12/21  14:07:14  cernlib
 * files as of end 1995
 *
 *   rules to build a library from objects in subdirs 
 *   GF. 180895
 *   mod: 081195 more transparent, add debug libraries
 *
 * use this rules with:
 * Imakefile:
 *  SubdirLibraryTarget(libname,subdirlist)
 *  where:   libname:	  name of library to make
 *  	     subdirlist:  list of subdirectories to take $(OBJS) files from
 * 
 * and invoke make with : 
 *   make libname  -or- make libname_debug 
 *   or on Unix : gmake liblibname.a   NOTE: This will not work for
 *                                           _debug/_shared
 * to get library libname up to date.
 *
 *  At the moment ONLY one library per Imakefile/Makefile is allowed.
 * 
 *
 *  make library does:
 *   in rule libname/libname_debug:
 *       i) update stamp/object.list files, this implies that all compiled
 *	    files are up to date, 
 *	ii) rebuild library, if anything changed.
 *          this rebuild is either done: 
 *	      - using the object.list file; this lists all objects for this 
 * 		library. xargs is used to make shure we do not overflow 
 * 		the command line.
 * 	      - visiting all subdirectries recursively, and adding in each 
 * 		directory the objects of this directory.
 *           
 */

XCOMM  the order of SubdirLibrary... is such that 
XCOMM   - if a library is defined, this will be the first target generated
XCOMM   - if NO library is defined, a target updating all objects is first
#ifndef SubdirLibraryTarget
#define Libversions archive debug shared
#if defined(UseXargs) && UseXargs 
#define SubdirLibraryTarget(libname,subdirlist)				@@\
SubdirLibraryVariables(libname,subdirlist)				@@\
SubdirLibraryObjects2(subdirlist)					@@\
SubdirLibraryBuild2(libname)						@@\
									@@\
ifneq ($($(VEROBJS)),)							@@\
$($(VEROBJS):.Osuf=.d): Makefile					@@\
include $($(VEROBJS):.Osuf=.d)						@@\
									@@\
endif									@@\
									@@\
clean:: 								@@\
	RemoveFiles($(LIBRARY) $(VERDIR)stamp $(VERDIR)objects.list)
#else
#define SubdirLibraryTarget(libname,subdirlist)				@@\
SubdirLibraryVariables(libname,subdirlist)				@@\
SubdirLibraryObjects(subdirlist)					@@\
SubdirLibraryBuild(libname)						@@\
SubdirLibraryAddObjects(subdirlist)					@@\
									@@\
ifneq ($($(VEROBJS)),)							@@\
$($(VEROBJS):.Osuf=.d): Makefile					@@\
include $($(VEROBJS):.Osuf=.d)						@@\
									@@\
endif									@@\
									@@\
clean:: 								@@\
	RemoveFiles($(LIBRARY) $(VERDIR)stamp $(VERDIR)objects.list)
#endif
#endif

XCOMM ---------------------------------------------------------------------

#ifndef SubdirLibraryVariables
#define SubdirLibraryVariables(libname,subdirlist)			@@\
ifeq ($(strip $(VERSION)),)						@@\
VERSION=archive								@@\
endif									@@\
ifneq ($(strip $(VERSION)),archive)					@@\
LIBRARY=Concat(libname,_$(VERSION))					@@\
else									@@\
LIBRARY=libname								@@\
endif									@@\
LIBPATH=$(TOP)$(CURRENT_DIR)						@@\
SUBDIRLIST=subdirlist							@@\
SUBDIRSTAMPS=$(foreach dir,subdirlist,$(dir)/$(VERSION)/stamp)		@@\
ifeq ($(strip $(PACKAGE_LIB)),)						@@\
override PACKAGE_LIB=$(LIBPATH)/LibraryTargetName($(LIBRARY))		@@\
endif									@@\
									@@\
ifneq (libname,)							@@\
.PHONY: libname Concat(libname,-debug) Concat(libname,-shared)		@@\
									@@\
libname:: 								@@\
	@$(MAKE) VERSION=archive LibraryTargetName($@)			@@\
									@@\
Concat(libname,-debug)::						@@\
	@$(MAKE) VERSION=debug LibraryTargetName($@)			@@\
									@@\
Concat(libname,-shared)::						@@\
	@$(MAKE) VERSION=shared SharedLibraryTargetName(libname)	@@\
									@@\
endif									@@\
									@@\
archive_OBJS=$(foreach obj,$(OBJS),archive/$(obj))			@@\
debug_OBJS=$(foreach obj,$(OBJS),debug/$(obj))				@@\
shared_OBJS=$(foreach obj,$(OBJS),shared/$(obj))			@@\
									@@\
									@@\
ifeq ($(VERSION),archive)						@@\
VEROBJS:=archive_OBJS							@@\
									@@\
endif									@@\
									@@\
ifeq ($(VERSION),debug)							@@\
VEROBJS:=debug_OBJS							@@\
									@@\
endif									@@\
									@@\
ifeq ($(VERSION),shared)						@@\
VEROBJS:=shared_OBJS							@@\
									@@\
endif									@@\
									@@\
ifeq ($(VERSION),nil)							@@\
VERDIR=									@@\
VEROBJS=								@@\
endif									@@\
									@@\
ifneq ($(strip $(VERSION)),)						@@\
VERDIR=$(VERSION)/							@@\
else									@@\
VERDIR=									@@\
VEROBJS=								@@\
endif
#endif

XCOMM --------------------------------------------------------------------- 

#ifndef SubdirLibraryBuild2
#define SubdirLibraryBuild2(libname)					@@\
ifneq ($(strip libname),)						@@\
ArchiveLibraryBuild(libname,archive)					@@\
									@@\
ArchiveLibraryBuild(libname-debug,debug)				@@\
									@@\
SharedLibraryBuild(libname,shared)					@@\
									@@\
endif
#endif

#ifndef ArchiveLibraryBuild
#define ArchiveLibraryBuild(libname,version)				@@\
LibraryTargetName(libname): version/objects.list			@@\
	@echo rebuild version library $@ in $(CURRENT_DIR)		@@\
	@$(RM) $@							@@\
	@date								@@\
	@cat version/objects.list | \					@@\
	   $(XARGS) $(AR) $@					 	@@\
	@date								@@\
	RanLibrary($@)
#endif

XCOMM --------------------------------------------------------------------- 

#if defined(HPArchitecture)
XCOMM HP Shared libraries.
#ifndef SharedLibraryTargetName
#  define SharedLibraryTargetName(name)Concat(lib,name.sl)
#endif
#ifndef SharedLibraryBuild
#define SharedLibraryBuild(libname,version)				@@\
SharedLibraryTargetName(libname): version/objects.list			@@\
	@echo rebuild version library $@ in $(CURRENT_DIR)		@@\
	@$(RM) $@							@@\
	@date								@@\
	ld -b -o$@ -c version/objects.list				@@\
	@date
#endif
#endif

#if defined(AIXArchitecture)
XCOMM AIX Shared libraries.

#ifndef SharedLibraryTargetName
#  define SharedLibraryTargetName(name)Concat(lib,name-s.a)
#endif
#ifndef SharedLibraryBuild
#  define SharedLibraryBuild(libname,version)				@@\
SharedLibraryTargetName(libname): version/objects.list			@@\
	@echo rebuild version library $@ in $(CURRENT_DIR)		@@\
	@$(RM) $@							@@\
	@date								@@\
	@cat version/objects.list | \					@@\
	   $(XARGS) $(AR) shr.a					 	@@\
	dump -g shr.a \							@@\
	| sed -n -e 's/^[ 	]*[0-9][0-9]*[	 ]*\([^	 .][^	 ]*\)$$/\1/p' > $@.syms	@@\
	$(LD) -o shr.o shr.a -H512 -T512 -bM\:SRE -bE\:$@.syms		@@\
	$(RM) shr.a							@@\
	$(AR) $@ shr.o							@@\
	$(RM) $@.syms shr.o						@@\
	@date
#endif

#endif

#if defined(AlphaArchitecture)
XCOMM Alpha Shared libraries.

#ifndef SharedLibraryTargetName
#  define SharedLibraryTargetName(name)Concat(lib,name.so)
#endif

#ifndef SharedLibraryBuild
#  define SharedLibraryBuild(libname,version)				@@\
SharedLibraryTargetName(libname): LibraryTargetName(libname)		@@\
	@echo rebuild version library $@ in $(CURRENT_DIR)		@@\
	@$(RM) $@							@@\
	@date								@@\
	ld -shared -o $@ -all LibraryTargetName(libname) -none \	@@\
		-lUfor -lfor -LFutil -lm -lots -lc			@@\
	@date
#endif
#endif

#if !defined(SharedLibraryBuild) && !defined(SharedLibaryTargetName)
XCOMM NO shared libraries.

#ifndef SharedLibraryBuild
#define SharedLibraryBuild(libname,version)				@@\
SharedLibraryTargetName(libname):					@@\
	@echo No shared library available yet for  `uname`
#endif
#endif

#ifndef SharedLibraryTargetName
#define SharedLibraryTargetName(name)Concat(lib,name.sl)
#endif

#ifndef SubdirLibraryBuild
#define SubdirLibraryBuild(libname)					@@\
ifneq ($(strip libname),)						@@\
LibraryTargetName($(LIBRARY)): $(VERDIR)stamp 				@@\
	@$(SHELL) -ec 'if [ -z "$(LIBRARY)" ]; then		\	@@\
		echo No library specified in $(CURRENT_DIR);	\	@@\
		false;						\	@@\
	fi'						 		@@\
	@echo rebuild $(VERSION) library $(LIBRARY) in $(CURRENT_DIR)	@@\
	@$(RM) LibraryTargetName($(LIBRARY))				@@\
	@$(MAKE)  --no-print-directory				\	@@\
		LIBPATH=$(LIBPATH) LIBRARY=$(LIBRARY)		\	@@\
	        VERSION=$(VERSION)			\		@@\
		libaddobjects						@@\
	RanLibrary($@)							@@\
									@@\
endif
#endif

XCOMM  -------------------------------------------------------------- 

#ifndef SubdirLibraryAddObjects
#define SubdirLibraryAddObjects(subdirlist)				@@\
libaddobjects:								@@\
	@if [ -n "$(OBJS)" ]; then				\	@@\
		echo adding $(VERSION) objects from $(CURRENT_DIR)/$(VERSION);\ @@\
		(cd ./$(VERSION);\
		$(AR) $(LIBPATH)/LibraryTargetName($(LIBRARY)) $(OBJS));\ @@\
	else							\	@@\
		true;						\	@@\
	fi								@@\
	@ $(SHELL) -ec '					\	@@\
	subdirs="$(SUBDIRLIST)";				\	@@\
	if [ -n "$(SUBDIRLIST)" ]; then				\	@@\
	 for dir in $$subdirs; do				\	@@\
	   (cd $$dir;						\	@@\
		$(MAKE) --no-print-directory			\	@@\
			LIBPATH=$(LIBPATH) LIBRARY=$(LIBRARY)	\	@@\
			VERSION=$(VERSION)			\	@@\
			$@ );					\	@@\
	 done;  						\	@@\
	fi;'
#endif

/* --------------------------------------------------------------------- */

#ifndef SubdirLibraryObjects
#define SubdirLibraryObjects(subdirlist)				@@\
$(SUBDIRSTAMPS):: $(foreach dir,subdirlist,$(dir)/Makefile)		@@\
									@@\
$(SUBDIRSTAMPS)::							@@\
	@ echo checking $(CURRENT_DIR)/FirstDir($@)			@@\
	@ $(MAKE) -C FirstDir($@) VERSION=$(VERSION) $(VERDIR)stamp	@@\
									@@\
$(VERDIR)stamp:: $($(VEROBJS)) $(SUBDIRSTAMPS)				@@\
	-@if [ -n "$(VERSION)" -a ! -d "$(VERSION)" ] ; then \		@@\
		$(MKDIR) $(VERSION);fi					@@\
	@ $(TOUCH) $@
#endif

/* --------------------------------------------------------------------- */

#ifndef SubdirLibraryObjects2
#define SubdirLibraryObjects2(dirs)					@@\
$(foreach ver,Libversions,$(ver)/objects.list):: \			@@\
		$(foreach dir,dirs,$(dir)/Makefile)			@@\
									@@\
define build-object-list						@@\
@[ -n "$(@D)" -a ! -d "$(@D)" ] && $(MKDIR) $(@D) || true		@@\
@RemoveFile($@)							@@\
@echo $(strip $($(@D)_OBJS)) | tr ' ' '\012' > $@		@@\
@ (set -e;\							@@\
	 case '${MFLAGS}' in *[i]*) set +e;; esac; \		@@\
	 subdirs=Quote(dirs);\					@@\
	 list=`/bin/pwd`/$@;\					@@\
	 for dir in $$subdirs; do \				@@\
	  (set -e;cd $$dir;SedCmd -e "\=^[^/]=s=^.=$$dir/&=" $@ >> $$list);\@@\
	 done) || (rm $@; exit 1)				@@\
endef									@@\
									@@\
ifeq ($(strip $(VERSION)),archive)					@@\
archive/objects.list:: Makefile $(archive_OBJS) \			@@\
		$(foreach dir,dirs,$(dir)/archive/objects.list)		@@\
	$(build-object-list)						@@\
									@@\
else									@@\
archive/objects.list::							@@\
	$(MAKE) VERSION=archive archive/objects.list			@@\
									@@\
endif									@@\
debug/objects.list:: Makefile $(debug_OBJS) \				@@\
		$(foreach dir,dirs,$(dir)/debug/objects.list) 		@@\
	$(build-object-list)						@@\
									@@\
shared/objects.list:: Makefile $(shared_OBJS) \				@@\
		$(foreach dir,dirs,$(dir)/shared/objects.list) 		@@\
	$(build-object-list)						@@\
									@@\
$(foreach dir,dirs,$(foreach ver,Libversions,$(dir)/$(ver)/objects.list))::@@\
	@ echo checking $(CURRENT_DIR)/FirstDir($@)			@@\
	@ $(MAKE) -C FirstDir($@) VERSION=$(filter Libversions,$(subst /, ,$@))	\		@@\
		   $(patsubst FirstDir($@)/%,%,$@)
#endif

#ifndef FirstDir
#define FirstDir(dir)$(firstword $(subst /, ,dir))
#endif

XCOMM End of biglib.rules
XCOMM --------------------------------------------------------------------- 

