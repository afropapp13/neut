/* $Id: makefile.rules,v 1.1.1.1 2016/11/04 20:29:56 mdunkman Exp $
 * 
 * Targets to help rebuild make files.
 *
 * $Log: makefile.rules,v $
 * Revision 1.1.1.1  2016/11/04 20:29:56  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.2  1999/07/21 13:45:04  mcgrew
 * There are default make depend targets at the end of the Imake.tmpl:
 * One for C.  One for fortran.  Make sure that the second doesn't over
 * write the results of the first.
 *
 * Revision 1.1  1997/06/10 18:04:34  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 */

XCOMM --------------------------------------------------------------
XCOMM Build the dependencies.

/*
 * DependDependency - generate rules to build the makedepend program if 
 * this Imakefile is within the source tree.  This is leftover from X11.
 */
#ifndef DependDependency
#ifdef UseInstalled
#define DependDependency() /**/
#else
#define DependDependency() 						@@\
depend:: ProgramTargetName($(DEPEND))					@@\
									@@\
ProgramTargetName($(DEPEND)):						@@\
	@echo "checking $@ over in $(DEPENDSRC) first..."; \		@@\
	cd $(DEPENDSRC); $(MAKE); \					@@\
	echo "okay, continuing in $(CURRENT_DIR)"

#endif /* UseInstalled */
#endif /* DependDependency */

/*
 * IxxDependency - generate rules to build the interface translator if 
 * this Imakefile is within the source tree.  This is leftover from X11.
 */
#ifndef IxxDependency
#ifdef UseInstalled
#define IxxDependency() /**/
#else
#define IxxDependency()							@@\
interfaces:: ProgramTargetName($(IXX))					@@\
									@@\
ProgramTargetName($(IXX)):						@@\
	@echo "checking $@ over in $(IXXSRC) first..."; \		@@\
	cd $(IXXSRC); $(MAKE); \					@@\
	echo "okay, continuing in $(CURRENT_DIR)"
#endif /* UseInstalled */
#endif /* IxxDependency */

/*
 * Run make depend on a series of sources with flags passed to makedepend
 */
#ifndef NamedDependTargetWithFlags
#define NamedDependTargetWithFlags(flags,defs,srcs)			@@\
DependDependency()							@@\
									@@\
depend::								@@\
	RunProgram(DEPEND,flags -- defs -- srcs)

#endif

/*
 * Run make depend on a series of sources.  
 */
#ifndef NamedDependTarget
#define NamedDependTarget(defs,srcs)					@@\
NamedDependTargetWithFlags($(DEPENDFLAGS),defs,srcs)
#endif

/*
 * DependTarget - generate rules to compute dependencies for all files listed
 * in $(SRCS).
 */
#ifndef DependTarget
#define DependTarget()							 @@\
NamedDependTarget($(ALLDEFINES) $(DEPEND_DEFINES), $(SRCS))
#endif /* DependTarget */

/*
 * DependTarget3 - generate rules to compute dependencies for all files given.
 */
#ifndef DependTarget3
#define	DependTarget3(srcs1,srcs2,srcs3)				@@\
NamedDependTarget($(ALLDEFINES) $(DEPEND_DEFINES), srcs1)		@@\
NamedDependTarget($(ALLDEFINES) $(DEPEND_DEFINES), srcs2)		@@\
NamedDependTarget($(ALLDEFINES) $(DEPEND_DEFINES), srcs3)
#endif /* DependTarget3 */

/*
 * ImakeDependency - generate rules to compile imake if this Imakefile is
 * within the source tree.
 */
#ifndef ImakeDependency
#if defined(UseInstalled) || !defined(ImCrazyToCompileImake)
#define ImakeDependency(target) /**/
#else
#define ImakeDependency(target)						@@\
target:: ProgramTargetName($(IMAKE))					@@\
									@@\
ProgramTargetName($(IMAKE)):						@@\
	-@(cd $(IMAKESRC); if [ -f Makefile ]; then \			@@\
	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \	@@\
	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \	@@\
	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)"; fi; \	@@\
	echo "okay, continuing in $(CURRENT_DIR)")
#endif /* UseInstalled */
#endif /* ImakeDependency */

XCOMM ---------------------------------------------------------------
XCOMM Targets to rebuild the Makefile.

/*
 * BuildMakefileTarget - generate rules to build a Makefile from an Imakefile
 * and any special imake flags.  This is generally done automatically by the
 * template or by any special Imakefiles.  The first argument exists just
 * because imakeflags is usually empty and some preprocessors will complain
 * if an empty argument is passed as the sole argument to a macro.
 */
#ifndef BuildMakefileTarget
#define	BuildMakefileTarget(notused,imakeflags)				@@\
ImakeDependency(Makefile)						@@\
									@@\
Makefile::								@@\
	RMoveToBakFile($@)						@@\
	$(IMAKE_CMD) -s - -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR) \	@@\
	             -DPackageTop=$(PACKAGETOP)	\			@@\
		     -DPackageName=$(PACKAGE_NAME) \			@@\
		     imakeflags -f Imakefile | $(TR) -d '\0' > Makefile

#endif /* BuildMakefileTarget */


/*
 * MakefileTarget - generate rules to build a normal Makefile.
 */
#ifndef MakefileTarget
#define MakefileTarget()						@@\
BuildMakefileTarget(Imakefile,NullParameter)
#endif /* MakefileTarget */

