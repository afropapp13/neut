/* $Id: compile.rules,v 1.1.1.1 2016/11/04 20:29:55 mdunkman Exp $
 * 
 * Targets to help compile source files.
 *
 * $Log: compile.rules,v $
 * Revision 1.1.1.1  2016/11/04 20:29:55  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.1  1997/06/10 18:04:27  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 */

/*
 * CPPOnlyCompile - run C compiler's preprocessor only
 */
#ifndef CPPOnlyCompile
#define CPPOnlyCompile(src,options) RemoveFile($@)			@@\
	$(CC) -E $(CFLAGS) options src > $@
#endif

/*
 * ObjectCompile - compile fragment for a normal object file
 */
#ifndef ObjectCompile
#define ObjectCompile(options) RemoveFile($@)				@@\
	$(CC) -c $(CFLAGS) options -o $@ $<
#endif

#ifndef ObjectCplusplusCompile
#define ObjectCplusplusCompile(options) RemoveFile($@)			@@\
	$(CXX) -c $(CXXFLAGS) options -o $@ $*.CCsuf
#endif

/*
 * NormalLibObjCompile - compile fragment for a normal library object file
 */
#ifndef NormalLibObjCompile
#define NormalLibObjCompile(options) ObjectCompile(options)
#endif

#ifndef NormalLibObjCplusplusCompile
#define NormalLibObjCplusplusCompile(options) ObjectCplusplusCompile(options)
#endif

/*
 * NormalSharedLibObjCompile - compile fragment for shared objects
 */
#ifndef NormalSharedLibObjCompile
#define NormalSharedLibObjCompile(options) \
NormalLibObjCompile(options $(SHLIBDEF) $(SHAREDCODEDEF) $(PICFLAGS))
#endif

#ifndef NormalSharedLibObjCplusplusCompile
#define NormalSharedLibObjCplusplusCompile(options) \
NormalLibObjCplusplusCompile(options $(SHLIBDEF) $(SHAREDCODEDEF) $(CXXPICFLAGS))
#endif

/*
 * LibObjCompile - compile fragment for unshared/profiled/debugged objects
 */
#ifndef LibObjCompile
#define LibObjCompile(dir,options) RemoveFiles($@ dir/$@)		@@\
	$(CC) -c $(CCOPTIONS) $(ALLDEFINES) options $*.c		@@\
	$(MV) $@ dir/$@
#endif

#ifndef LibObjCplusplusCompile
#define LibObjCplusplusCompile(dir,options) RemoveFiles($@ dir/$@)	@@\
	$(CXX) -c $(CXXOPTIONS) $(CXXDEFINES) options $*.CCsuf		@@\
	$(MV) $@ dir/$@
#endif

/*
 * DebuggedLibObjCompile - compile fragment for debugged objects
 */
#ifndef DebuggedLibObjCompile
#define DebuggedLibObjCompile(options) LibObjCompile(debugger,DebuggableCDebugFlags options)
#endif

#ifndef DebuggedLibObjCplusplusCompile
#define DebuggedLibObjCplusplusCompile(options) LibObjCplusplusCompile(debugger,DebuggableCplusplusDebugFlags options)
#endif

/*
 * ProfiledLibObjCompile - compile fragment for profiled objects
 */
#ifndef ProfiledLibObjCompile
#define ProfiledLibObjCompile(options) LibObjCompile(profiled,ProfiledCDebugFlags options)
#endif

#ifndef ProfiledLibObjCplusplusCompile
#define ProfiledLibObjCplusplusCompile(options) LibObjCplusplusCompile(profiled,ProfiledCplusplusDebugFlags options)
#endif

/*
 * UnsharedLibObjCompile - compile fragment for unshared objects
 */
#ifndef UnsharedLibObjCompile
#define UnsharedLibObjCompile(options) LibObjCompile(unshared,$(CDEBUGFLAGS) options)
#endif

#ifndef UnsharedLibObjCplusplusCompile
#define UnsharedLibObjCplusplusCompile(options) LibObjCplusplusCompile(unshared,$(CXXDEBUGFLAGS) options)
#endif

/*
 * SharedLibObjCompile - compile fragment for shared objects
 */
#ifndef SharedLibObjCompile
#define SharedLibObjCompile(options) LibObjCompile(shared,options $(SHLIBDEF) $(SHAREDCODEDEF) $(PICFLAGS) $(CDEBUGFLAGS))
#endif

XCOMM NormalLibraryObjectRule - for simple libraries
#ifndef NormalLibraryObjectRule
#define	NormalLibraryObjectRule()					@@\
ObjTargetName(%.Osuf): %.c						@@\
	LibMkdir($(OBJPREFIX))						@@\
	NormalLibObjCompile($(_NOOP_))
#endif /* NormalLibraryObjectRule */
NormalLibraryObjectRule()

XCOMM Normal rule for C++ library objects.
#ifndef NormalCplusplusObjectRule
#if HasCplusplus
#define NormalCplusplusObjectRule()					@@\
ObjTargetName(%.Osuf): %.CCsuf						@@\
	LibMkdir($(OBJPREFIX))						@@\
	NormalLibObjCplusplusCompile($(_NOOP_))
#else
#define NormalCplusplusObjectRule() /**/
#endif
#endif
NormalCplusplusObjectRule()

/*
 * SpecialObjectRule - generate rules to compile a file with special flags.
 */
#ifndef SpecialObjectRule
#define SpecialObjectRule(objs,depends,options)				@@\
Objects(objs):	depends							@@\
	ObjectCompile(options)
#endif /* SpecialObjectRule */

#ifndef SpecialCplusplusObjectRule
#define SpecialCplusplusObjectRule(baseobj,basedep,options)		@@\
ObjTargetName(baseobj.Osuf):	basedep.CCsuf				@@\
	ObjectCplusplusCompile(options)
#endif /* SpecialCplusplusObjectRule */

/*
 * SpecialCObjectRule - generate rules to compile a C file with special flags.
 *			also handles CodeCenter rules
 */
#ifndef SpecialCObjectRule
#define SpecialCObjectRule(basename,depends,options)			@@\
SpecialObjectRule(basename.Osuf,basename.c depends,options)		@@\
									@@\
basename.i: basename.c depends						@@\
	CPPOnlyCompile(basename.c,options)				@@\
									@@\
CenterLoadTarget(debug_src,basename.c,NullParameter,$(ALLDEFINES) options)
#endif /* SpecialCObjectRule */


#ifndef ObjectFromSpecialSource
#define ObjectFromSpecialSource(dst,src,flags)				@@\
dst.c:  src.c								@@\
	RemoveFile($@)							@@\
	$(LN) $? $@							@@\
									@@\
SpecialCObjectRule(dst,NullParameter,flags)				@@\
									@@\
depend::  dst.c								@@\
									@@\
clean::									@@\
	RemoveFile(dst.c)
#endif /* ObjectFromSpecialSource */

XCOMM Define a target to build a lone object file.
#ifndef NormalObjectTarget
#define NormalObjectTarget(objname)					@@\
.PHONY: objname								@@\
									@@\
AllTarget(objname)							@@\
									@@\
objname: ObjTargetName(objname)
#endif
