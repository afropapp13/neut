/* $Id: library.rules,v 1.1 2007-01-20 07:35:40 skrep Exp $
 * 
 * Targets to help build libraries.
 *
 * $Log: not supported by cvs2svn $
 * Revision 1.2  1997/07/28 05:30:27  mcgrew
 * Added shared libarry stuff.
 *
 * Revision 1.1  1997/06/10 18:04:31  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 */

/*
 * LintLibReferences - variables for lint libraries
 */
#ifndef LintLibReferences
#define LintLibReferences(varname,libname,libsource)			@@\
Concat(LINT,varname) = _UseCat($(LINTLIBDIR)/llib-l,libsource/llib-,libname.ln)
#endif

/*
 * UnsharedLibReferences - variables for unshared libraries
 */
#ifndef UnsharedLibReferences
#define UnsharedLibReferences(varname,libname,libsource)		@@\
Concat3(DEP,varname,LIB) = _UseCat($(USRLIBDIR)/lib,$(BUILDLIBDIR)/lib,libname.a)	@@\
Concat(varname,LIB) = LoaderLibPrefix Concat(-l,libname)		@@\
LintLibReferences(varname,libname,libsource)
#endif

/*
 * SharedLibDependencies - shared library dependencies
 */
#ifndef SharedLibDependencies
#define SharedLibDependencies(libname,libsource,revname) /**/
#endif

/*
 * SharedDSLibDependencies - shared library dependencies with data separation
 */
#ifndef SharedDSLibDependencies
#define SharedDSLibDependencies(libname,libsource,revname) /**/
#endif

/*
 * SharedLibReferences - variables for shared libraries
 */
#ifndef SharedLibReferences
#define SharedLibReferences(varname,libname,libsource,revname,rev)	@@\
revname = rev								@@\
Concat3(DEP,varname,LIB) = SharedLibDependencies(libname,libsource,revname) @@\
Concat(varname,LIB) = LoaderLibPrefix Concat(-l,libname)		@@\
LintLibReferences(varname,libname,libsource)
#endif

/*
 * SharedDSLibReferences - variables for shared libraries
 */
#ifndef SharedDSLibReferences
#define SharedDSLibReferences(varname,libname,libsource,revname,rev)	@@\
revname = rev								@@\
Concat3(DEP,varname,LIB) = SharedDSLibDependencies(libname,libsource,revname) @@\
Concat(varname,LIB) = LoaderLibPrefix Concat(-l,libname)		@@\
LintLibReferences(varname,libname,libsource)
#endif

#ifndef LinkBuildLibrary
#ifdef UseInstalled
#define LinkBuildLibrary(lib) $(_NULLCMD_)
#else
#define LinkBuildLibrary(lib) MakeDir($(BUILDLIBDIR))			@@\
	RemoveFile($(BUILDLIBDIR)/lib)					@@\
	cd $(BUILDLIBDIR); $(LN) $(BUILDINCTOP)/$(CURRENT_DIR)/lib .
#endif
#endif /* LinkBuildLibrary */

#ifndef _LinkBuildLibrary /* will get redefined elsewhere */
#define _LinkBuildLibrary(lib) $(_NULLCMD_)
#endif /* _LinkBuildLibrary */

/*
 * NormalLibraryTarget - generate rules to create a library.
 */
#ifndef NormalLibraryTarget
#define	NormalLibraryTarget(libname,objlist)				@@\
.PHONY: LibraryName(libname)						@@\
									@@\
AllTarget(LibraryName(libname))						@@\
									@@\
LibraryName(libname): LibraryTargetName(libname)			@@\
									@@\
LibraryTargetName(libname): Objects(objlist)				@@\
	RemoveFile($@)							@@\
	MakeLibrary($@,objlist)						@@\
	RanLibrary($@)							@@\
	_LinkBuildLibrary($@)
#endif /* NormalLibraryTarget */


/*
 * NormalLibraryTarget2 - generate rules to create a library in two steps.
 * This is used to create libraries with large numbers of files.
 */
#ifndef NormalLibraryTarget2
#define	NormalLibraryTarget2(libname,objlist1,objlist2)			@@\
AllTarget(LibraryTargetName(libname))					@@\
									@@\
LibraryTargetName(libname): Objects(objlist1) Objects(objlist2)		@@\
	RemoveFile($@)							@@\
	MakeLibrary($@,objlist1)					@@\
	MakeLibrary($@,objlist2)					@@\
	RanLibrary($@)							@@\
	_LinkBuildLibrary($@)
#endif /* NormalLibraryTarget2 */


/*
 * NormalLibraryTarget3 - generate rules to create a library in three steps.
 * This is used to create libraries with very large numbers of files.
 */
#ifndef NormalLibraryTarget3
#define	NormalLibraryTarget3(libname,objlist1,objlist2,objlist3)	@@\
AllTarget(LibraryTargetName(libname))					@@\
									@@\
LibraryTargetName(libname): Objects(objlist1) Objects(objlist2) Objects(objlist3) @@\
	RemoveFile($@)							@@\
	MakeLibrary($@,objlist1)					@@\
	MakeLibrary($@,objlist2)					@@\
	MakeLibrary($@,objlist3)					@@\
	RanLibrary($@)							@@\
	_LinkBuildLibrary($@)
#endif /* NormalLibraryTarget3 */


/*
 * NormalDepLibraryTarget - generate rules to create a library.
 */
#ifndef NormalDepLibraryTarget
#define	NormalDepLibraryTarget(libname,deplist,objlist)			@@\
AllTarget(LibraryTargetName(libname))					@@\
									@@\
LibraryTargetName(libname): deplist					@@\
	RemoveFile($@)							@@\
	MakeLibrary($@,objlist)						@@\
	RanLibrary($@)							@@\
	_LinkBuildLibrary($@)
#endif /* NormalDepLibraryTarget */


/*
 * UnsharedLibraryTarget - generate rules to create a library.
 */
#ifndef UnsharedLibraryTarget
#define	UnsharedLibraryTarget(libname,objlist,down,up)			@@\
AllTarget(LibraryTargetName(libname))					@@\
									@@\
LibraryTargetName(libname): Objects(objlist)				@@\
	RemoveFile($@)							@@\
	(cd down; MakeLibrary(up/$@,objlist))				@@\
	RanLibrary($@)							@@\
	_LinkBuildLibrary($@)
#endif /* UnsharedLibraryTarget */


/*
 * UnsharedLibraryTarget3 - generate rules to create a library in three steps.
 * This is used to create libraries with very large numbers of files.
 */
#ifndef UnsharedLibraryTarget3
#define	UnsharedLibraryTarget3(libname,objlist1,objlist2,objlist3,down,up) @@\
AllTarget(LibraryTargetName(libname))					@@\
									@@\
LibraryTargetName(libname): Objects(objlist1) Objects(objlist2) Objects(objlist3) @@\
	RemoveFile($@)							@@\
	(cd down; MakeLibrary(up/$@,objlist1))				@@\
	(cd down; MakeLibrary(up/$@,objlist2))				@@\
	(cd down; MakeLibrary(up/$@,objlist3))				@@\
	RanLibrary($@)							@@\
	_LinkBuildLibrary($@)
#endif /* UnsharedLibraryTarget3 */


/*
 * SubdirLibraryRule -
 */
#ifndef SubdirLibraryRule
#define	SubdirLibraryRule(objlist)					@@\
all:: DONE								@@\
									@@\
DONE: Objects(objlist)							@@\
	RemoveFile($@)							@@\
	touch $@							@@\
									@@\
clean::									@@\
	RemoveFile(DONE)
#endif /* SubdirLibraryRule */


/*
 * ProfiledLibraryTarget - generate rules to create a profiled library.
 */
#ifndef ProfiledLibraryTarget
#define	ProfiledLibraryTarget(libname,objlist)				@@\
AllTarget(LibraryTargetNameSuffix(libname,_p))				@@\
									@@\
LibraryTargetNameSuffix(libname,_p): Objects(objlist)			@@\
	RemoveFile($@)							@@\
	cd profiled; MakeLibrary(../$@,objlist)				@@\
	RanLibrary($@)

#endif /* ProfiledLibraryTarget */


/*
 * DebuggedLibraryTarget - generate rules to create a debuggable library.
 */
#ifndef DebuggedLibraryTarget
#define	DebuggedLibraryTarget(libname,objlist)				@@\
AllTarget(LibraryTargetNameSuffix(libname,_d))				@@\
									@@\
LibraryTargetNameSuffix(libname,_d): Objects(objlist)			@@\
	RemoveFile($@)							@@\
	cd debugger; MakeLibrary(../$@,objlist)				@@\
	RanLibrary($@)

#endif /* DebuggedLibraryTarget */


/*
 * AliasedLibraryTarget - generate rules to link one library to another.
 */
#ifndef AliasedLibraryTarget
#define	AliasedLibraryTarget(libname,alias)				@@\
AllTarget(LibraryTargetName(alias))					@@\
									@@\
LibraryTargetName(alias): LibraryTargetName(libname)			@@\
	RemoveFile($@)							@@\
	$(LN) LibraryTargetName(libname) $@				@@\
									@@\
clean::									@@\
	RemoveFile(LibraryTargetName(alias))
#endif /* AliasedLibraryTarget */


/*
 * NormalRelocatableTarget - generate rules to produce a relocatable object
 * file instead of a library.  
 */
#ifndef NormalRelocatableTarget
#define	NormalRelocatableTarget(objname,objlist)			@@\
AllTarget(objname.Osuf)							@@\
									@@\
objname.Osuf: Objects(objlist)						@@\
	RemoveFile($@)							@@\
	$(LD) $(LDCOMBINEFLAGS) objlist -o $@
#endif /* NormalRelocatableTarget */


/*
 * ProfiledRelocatableTarget - generate rules to produce a profiled relocatable
 * object file instead of a library.
 */
#ifndef ProfiledRelocatableTarget
#define	ProfiledRelocatableTarget(objname,objlist)			@@\
AllTarget(Concat(objname,_p.Osuf))					@@\
									@@\
Concat(objname,_p.Osuf): Objects(objlist)				@@\
	RemoveFile($@)							@@\
	$(LD) -X -r Objects(objlist) -o $@

#endif /* ProfiledRelocatableTarget */


/*
 * DebuggedRelocatableTarget - generate rules to produce a debuggable 
 * relocatable object file instead of a library.
 */
#ifndef DebuggedRelocatableTarget
#define	DebuggedRelocatableTarget(objname,objlist)			@@\
AllTarget(Concat(objname,_d.Osuf))					@@\
									@@\
Concat(objname,_d.Osuf): Objects(objlist)				@@\
	RemoveFile($@)							@@\
	$(LD) -X -r Objects(objlist) -o $@

#endif /* DebuggedRelocatableTarget */

/* Link the revision into the library name. */
#ifndef LinkRevision
#define LinkRevision(libname,rev) (cd $(OBJPREFIX); \			@@\
	$(RM) ShLibName(libname); \					@@\
	$(LN) ShLibNameRev(libname,rev) ShLibName(libname))
#endif

/* Load a shared library */
#ifndef LdSharedLib
#define LdSharedLib(lib,options,objs,libs,ReqLibs)\
	$(CCLINK) -o lib $(SHLIBLDFLAGS) options SOListOptions ShObj(objs) libs ShLibOptions ReqLibs BaseShLibReqs
#endif

/* Produce a shared library. */
#ifndef NormalSharedLibraryTarget
#define NormalSharedLibraryTarget(libname,rev,objs,libs,locallibs,syslibs)	@@\
shared:: ShLibTargetName(libname,rev)					@@\
									@@\
ShLibTargetName(libname,rev): ShObj(objs)				@@\
	RemoveFile($@)							@@\
	LdSharedLib($@,$(SHLIBLDFLAGS) $(LDOPTIONS),objs,libs,locallibs $(LDLIBS) syslibs)	@@\
	LinkRevision(libname,rev)
#endif



