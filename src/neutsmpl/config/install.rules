/* $Id: install.rules,v 1.1.1.1 2016/11/04 20:29:56 mdunkman Exp $ 
 *
 * Targets to install all sorts of different types of files.
 *
 * $Log: install.rules,v $
 * Revision 1.1.1.1  2016/11/04 20:29:56  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.14  1999/07/21 18:28:00  mcgrew
 * Fix the Install Library and Install Library Alias functions to use the
 * full library for their internal rules.  This will prevent collisions
 * with Install Program.
 *
 * Revision 1.13  1999/06/12 06:34:44  tomba
 * Fixed a typo.
 *
 * Revision 1.12  1999/04/19 01:31:00  mcgrew
 * Install an aliasfor install.exec and for install.<alias>.
 *
 * Revision 1.11  1999/04/19 01:16:59  mcgrew
 * Debug "installprogramalias".
 *
 * Revision 1.10  1999/02/26 14:05:59  sharkey
 * Ooops, sorry for the accidental commit with the emtpy log.  I tried to
 * abort the commit but accidently committed!  I guess I'm tired...
 *
 * The rules for installing shared libraries were still severely broken
 * in the in the version before the previous commit.  They would produce a working
 * Makefile, but the install target directory was lib/`Machine`/`Machine` due to
 * incorrect use to the ShLibTargetName macro, which already includes a `Machine`.
 *
 * This has been changed to ShLibNameRev, which gets rid of the duplicated
 * directory.
 *
 * I tried to make the install.shlib directive look a little more like the
 * install.lib directive.  It now follows the same form and uses the
 * InstallNamedTarget function and should work more or less the same way.
 *
 * Those features were all added in the "accidental" release a few minutes
 * (hours?) ago.
 *
 * This release also adds an InstallSharedLibraryAlias function which is
 * a direct parallel to the InstallLibraryAlias function.
 *
 * Revision 1.9  1999/02/26 13:10:12  sharkey
 * *** empty log message ***
 *
 * Revision 1.8  1999/02/26 10:32:22  sharkey
 * There was a bug in InstallSharedLibrary which called ShLibTargetName
 * with only the library name as an argument, not the name and version number.
 * Both are required.  Fixed now.
 *
 * Revision 1.7  1999/02/18 01:35:12  mcgrew
 * Add a "ProgramAlias" target to attach an easy to use alias to an
 * executable with a version number.
 *
 * Revision 1.6  1998/10/03 08:24:26  mcgrew
 * ARRHHHGGGHHHGGGHHH!  A commit got lost over the net.
 *
 * Revision 1.5  1998/09/15 22:42:55  mcgrew
 * Add a rule so that an install target is generated for a program, but
 * it's not an install.exec target.  The new rules are "OptionalProgram"
 * and "OptionalScript".
 *
 * Revision 1.4  1997/07/28 05:30:26  mcgrew
 * Added shared library stuff.
 *
 * Revision 1.3  1997/06/16 15:53:31  superk
 * Changed InstallScript to not append .script to the target, thus making
 * it useful for all scripts.  -ATH
 *
 * Revision 1.2  1997/06/10 23:45:23  skrep
 * Various minor fixes so that files are a bit more pleasing.
 *
 * Revision 1.1  1997/06/10 18:04:31  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 *
 */
XCOMM ------------------------------------------------------------
XCOMM File installation targets.

#if AlwaysInstall
XCOMM Always install files even if the installed file is newer.
#ifndef InstallNamedTarget
#define	InstallNamedTarget(step,srcname,flags,dest,dstname)		@@\
step:: srcname								@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) $(INSTALLFLAGS) flags srcname $(DESTDIR)dest/dstname
#endif /* InstallNamedTarget */
#else
XCOMM Only install files if the installed file is older.
#ifndef InstallNamedTarget
#define InstallNamedTarget(step,srcname,flags,dest,dstname)             @@\
step:: $(DESTDIR)dest/dstname						@@\
									@@\
$(DESTDIR)dest/dstname: srcname						@@\
	MakeDir($(DESTDIR)dest)				        	@@\
	RemoveFile($@)							@@\
	$(INSTALL) $(INSTALLFLAGS) flags $< $@
#endif /* InstallNamedTarget */
#endif

#ifndef InstallTarget
#define	InstallTarget(step,file,flags,dest)				@@\
InstallNamedTarget(step,file,flags,dest,file)
#endif /* InstallTarget */

/*
 * Install include files
 */
#ifndef InstallInclude
#define InstallInclude(file,dest)					@@\
includes:: file								@@\
									@@\
InstallNamedTarget(install.include,file,$(INSTDATFLAGS),dest,file)
/*
 *InstallMultipleDestFlags(install.include,file,dest,$(INSTDATFLAGS))
 */
#endif

/*
 * UpdateIncludeDir
 *  copy include files from local to installed directory
 *
 */
#ifndef InstallIncludes
#define InstallIncludes(files,dir,subdir)\
					                                @@\
ifneq ($(strip dir),)							@@\
install.include:: $(foreach file,files,$(DESTDIR)dir/subdir/$(file))	@@\
									@@\
$(foreach file,files,$(DESTDIR)dir/subdir/$(file)):\			@@\
$(DESTDIR)dir/subdir/%: %						@@\
	MakeDir($(DESTDIR)dir/subdir)					@@\
	RemoveFile($@)							@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTINCFLAGS) $< $@		@@\
									@@\
else									@@\
install.include::							@@\
									@@\
endif
#endif /* InstallIncludes */

/* 
 * InstallObject - generate rules to install the indicated object file.
 */
#ifndef InstallObject
#define InstallObject(objname,dest)					@@\
.PHONY: install.lib objname						@@\
									@@\
objname: ObjTargetName(objname)						@@\
									@@\
InstallNamedTarget(install.lib,ObjTargetName(objname),$(INSTLIBFLAGS),dest,objname)
#endif
/*
 * InstallLibrary - generate rules to install the indicated library.
 */
#ifndef InstallLibrary
#define	InstallLibrary(libname,dest)					@@\
.PHONY: install.lib lib/LibraryName(libname)				@@\
									@@\
lib/LibraryName(libname):: $(DESTDIR)dest/LibraryName(libname)		@@\
									@@\
InstallNamedTarget(install.lib,LibraryTargetName(libname),$(INSTLIBFLAGS),dest,LibraryName(libname))
#endif /* InstallLibrary */

/*
 * InstallSharedLibrary - generate rules to install the indicated sharable 
 * Library
 */
#undef InstallSharedLibrary
#ifndef InstallSharedLibrary
#define InstallSharedLibrary(libname,rev,dest)				@@\
.PHONY: install.shlib shlib/libname					@@\
shlib/libname:: $(DESTDIR)dest/ShLibNameRev(libname,rev)		@@\
									@@\
InstallNamedTarget(install.shlib,ShLibTargetName(libname,rev),$(INSTLIBFLAGS),dest,ShLibNameRev(libname,rev))
#endif /* InstallSharedLibrary */

/*
 * InstallLinkKitLibrary - rule to install Link Kit library.
 *                         (only used for XFree86). This is a no-op
 *                         rule so that Imakefiles on non-XFree86 systems
 *                         continue to build Makefiles correctly.
 */
#ifndef InstallLinkKitLibrary
#define InstallLinkKitLibrary(lib,dir)
#endif


/*
 * InstallLinkKitNamedLibrary - rule to install Link Kit library.
 *                         (only used for XFree86). This is a no-op
 *                         rule so that Imakefiles on non-XFree86 systems
 *                         continue to build Makefiles correctly.
 */
#ifndef InstallLinkKitNamedLibrary
#define InstallLinkKitNamedLibrary(lib,dlib,dir)
#endif


/*
 * MergeIntoInstalledLibrary - generate rules to merge one library into another
 */
#ifndef MergeIntoInstalledLibrary
#define MergeIntoInstalledLibrary(tolib,fromlib)			@@\
install::  fromlib							@@\
	$(SCRIPTSRC)/mergelib $(DESTDIR)tolib fromlib
#endif /* MergeIntoInstalledLibrary */

/*
 * InstallLibraryAlias - generate rules to create a link from one library name
 * to another for the purposes of aliasing.
 */
#ifndef InstallLibraryAlias
#define	InstallLibraryAlias(libname,alias,dest)				@@\
.PHONY: install.lib install.LibraryName(alias)				@@\
									@@\
install.lib:: install.LibraryName(alias)				@@\
									@@\
install.LibraryName(alias):: $(DESTDIR)dest/LibraryName(alias)		@@\
									@@\
$(DESTDIR)dest/LibraryName(alias): $(DESTDIR)dest/LibraryName(libname)	@@\
	-(cd $(DESTDIR)dest; \						@@\
		RemoveFile(LibraryName(alias)); \			@@\
		$(LN) LibraryName(libname) LibraryName(alias))
#endif /* InstallLibraryAlias */


/*
 * InstallSharedLibraryAlias - generate rules to create a link from one
 * shared library name to another for the purposes of aliasing.
 */
#ifndef InstallSharedLibraryAlias
#define	InstallSharedLibraryAlias(alias,rev,dest)		@@\
install.shlib:: $(DESTDIR)dest/ShLibName(alias)			@@\
									@@\
$(DESTDIR)dest/ShLibName(alias): $(DESTDIR)dest/ShLibNameRev(alias,rev) @@\
	-(cd $(DESTDIR)dest; \						@@\
		RemoveFile(ShLibName(alias)); \			@@\
		$(LN) ShLibNameRev(alias,rev) ShLibName(alias))
#endif /* InstallSharedLibraryAlias */


/*
 * InstallLintLibrary - generate rules to install the indicated lint library.
 */
#ifndef InstallLintLibrary
#define	InstallLintLibrary(libname,dest)				@@\
InstallTarget(install.ln,Concat(llib-l,libname.ln),$(INSTLIBFLAGS),dest)
#endif /* InstallLintLibrary */


/*
 * InstallLibManPageLong - generate rules to install the indicated manual page,
 * giving it an alternate name.  This is used for installing man pages whose
 * base name without the .man suffix would normally be longer than 8 characters
 * (the limit for using source code control systems on files systems with 
 * short file names).
 */
#ifndef InstallLibManPageLong
#define	InstallLibManPageLong(file,destdir,dest)			@@\
InstallNamedTarget(install.man,file.man,$(INSTMANFLAGS),destdir,dest.$(LIBMANSUFFIX))
#endif /* InstallLibManPageLong */


/*
 * InstallLibManPage - generate rules to install the indicated manual page.
 */
#ifndef InstallLibManPage
#define	InstallLibManPage(file,destdir)					@@\
InstallLibManPageLong(file,destdir,file)
#endif /* InstallLibManPage */


/*
 * InstallLibManPageAliases - generate rules to install manual page aliases.
 */
#ifndef InstallLibManPageAliases
#define	InstallLibManPageAliases(file,destdir,aliases)			@@\
install.man::								@@\
	@(TMP=/tmp/tmp.$$$$; \						@@\
	RemoveFile($${TMP}); \						@@\
	echo .so `basename destdir`/file.$(LIBMANSUFFIX) > $${TMP}; \	@@\
	for i in aliases; do (set -x; \					@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTLIBMANFLAGS) $${TMP} $(DESTDIR)destdir/$$i.$(LIBMANSUFFIX)); \ @@\
	done; \								@@\
	RemoveFile($${TMP}))
#endif /* InstallLibManPageAliases */

/*
 * InstallLibManPageAliases - generate rules to install manual page aliases.
 */
#ifndef InstallLibManPageAliases
#define	InstallLibManPageAliases(file,destdir,aliases)			@@\
install.man::								@@\
	@(TMP=/tmp/tmp.$$$$; \						@@\
	RemoveFile($${TMP}); \						@@\
	echo .so `basename destdir`/file.$(LIBMANSUFFIX) > $${TMP}; \	@@\
	for i in aliases; do (set -x; \					@@\
	InstallWithFlags($(INSTMANFLAGS),$${TMP},$(DESTDIR)destdir/$$i.$(LIBMANSUFFIX))); \ @@\
	done; \								@@\
	RemoveFile($${TMP}))
#endif /* InstallLibManPageAliases */


/*
 * InstallManPageLong - generate rules to install the indicated manual page,
 * giving it an alternate name.  This is used for installing man pages whose
 * base name without the .man suffix would normally be longer than 8 characters
 * (the limit for using source code control systems on files systems with 
 * short file names).
 */
#ifndef InstallManPageLong
#define	InstallManPageLong(file,destdir,dest)				@@\
InstallNamedTarget(install.man,file.man,$(INSTMANFLAGS),destdir,dest.$(MANSUFFIX))
#endif /* InstallManPageLong */


/*
 * InstallManPage - generate rules to install the indicated manual page.
 */
#ifndef InstallManPage
#define	InstallManPage(file,destdir)					@@\
InstallManPageLong(file,destdir,file)
#endif /* InstallManPage */


/*
 * InstallManPageAliases - generate rules to install manual page aliases.
 */
#ifndef InstallManPageAliases
#define	InstallManPageAliases(file,destdir,aliases)			@@\
install.man::								@@\
	@(TMP=/tmp/tmp.$$$$; \						@@\
	RemoveFile($${TMP}); \						@@\
	echo .so `basename destdir`/file.$(MANSUFFIX) > $${TMP}; \	@@\
	for i in aliases; do (set -x; \					@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTMANFLAGS) $${TMP} $(DESTDIR)destdir/$$i.$(MANSUFFIX)); \ @@\
	done; \								@@\
	RemoveFile($${TMP}))
#endif /* InstallManPageAliases */


/*
 * InstallNamedNonExec - generate rules to install a data file
 */
#ifndef InstallNamedNonExec
#define	InstallNamedNonExec(srcname,dstname,dest)			@@\
InstallNamedTarget(install,srcname,$(INSTDATFLAGS),dest,dstname)
#endif /* InstallNamedNonExec */


/*
 * InstallNonExecFile - generate rules to install a data file
 */
#ifndef InstallNonExecFile
#define	InstallNonExecFile(file,dest)					@@\
InstallTarget(install,file,$(INSTDATFLAGS),dest)
#endif /* InstallNonExecFile */

/*
 * InstallNonExecFileTarget - generate rules to install a data file
 *                            with target
 */
#ifndef InstallNonExecFileTarget
#define	InstallNonExecFileTarget(target,file,dest)			@@\
InstallTarget(target,file,$(INSTDATFLAGS),dest)
#endif /* InstallNonExecFileTarget */


/*
 * InstallLinkKitNonExecFile - rule for installing server Link Kit files.
 *                         (only used for XFree86). This is a no-op
 *                         rule so that Imakefiles on non-XFree86 systems
 *                         continue to build Makefiles correctly.
 */
#ifndef InstallLinkKitNonExecFile
#define InstallLinkKitNonExecFile(file,dir)

#endif


/*
 * InstallNonExec - generate rules to install a data file, but does not
 * try to create the destination directory (deprecated). Use
 * InstallNonExecFile.
 */
#ifndef InstallNonExec
#define	InstallNonExec(file,dest) InstallNonExecFile(file,dest)
#endif /* InstallNonExec */


/* 
 * InstallOptionalProgr - Generate rules to install an optional
 * executable program.
 */
#ifndef OptionalProgram
#define OptionalProgram(program,dest)					@@\
.PHONY: bin/program							@@\
									@@\
bin/program:: $(DESTDIR)dest/program					@@\
									@@\
exec:: ProgramTargetName(program)					@@\
									@@\
InstallNamedTarget(install.program,ProgramTargetName(program),$(INSTBINFLAGS),dest,program)

#endif /* OptionalProgram */


/*
 * InstallProgramWithFlags - generate rules to install an executable program
 * using given install flags.
 */
#ifndef InstallProgramWithFlags
#define InstallProgramWithFlags(program,dest,flags)			@@\
.PHONY: bin/program install.exec					@@\
									@@\
bin/program:: $(DESTDIR)dest/program					@@\
									@@\
exec:: ProgramTargetName(program)					@@\
									@@\
install.exec:: install.program						@@\
									@@\
InstallNamedTarget(install.program,ProgramTargetName(program),$(INSTBINFLAGS),dest,program)

#endif /* InstallProgramWithFlags */


/*
 * InstallProgram - generate rules to install an executable program using any
 * special install flags set in $(INSTALLFLAGS).
 */
#ifndef InstallProgram
#define	InstallProgram(program,dest)					@@\
InstallProgramWithFlags(program,dest,NullParameter)

#endif /* InstallProgram */

/*
 * InstallProgramAlias - generate rules to create a link from one program name
 * to another for the purposes of aliasing.
 */
#ifndef InstallProgramAlias
#define	InstallProgramAlias(program,alias,dest)				@@\
.PHONY: install.exec install.alias 					@@\
									@@\
install.exec:: install.alias 						@@\
									@@\
install.alias:: $(DESTDIR)dest/alias					@@\
									@@\
$(DESTDIR)dest/alias: $(DESTDIR)dest/program				@@\
	-(cd $(DESTDIR)dest; \						@@\
		RemoveFile(alias); \					@@\
		$(LN) program alias)
#endif /* InstallProgramAlias */

/*
 * OptionalScript - install a shell script.
 */
#ifndef OptionalScript
#define	OptionalScript(program,dest)					@@\
									@@\
InstallNamedTarget(install.program,program,$(INSTBINFLAGS),dest,program)

#endif /* OptionalScript */


/*
 * InstallScript - install a shell script.
 */
#ifndef InstallScript
#define	InstallScript(program,dest)					@@\
.PHONY: install.exec							@@\
									@@\
install.exec:: install.program						@@\
									@@\
InstallNamedTarget(install.program,program,$(INSTBINFLAGS),dest,program)

#endif /* InstallScript */


/*
 * InstallNamedProg - install a program with renaming and no stripping.
 */
#ifndef InstallNamedProg
#define	InstallNamedProg(srcname,dstname,dest)				@@\
.PHONY: install.exec							@@\
									@@\
install.exec:: install.dstname						@@\
									@@\
InstallNamedTarget(install.dstname,srcname,$(INSTBINFLAGS),dest,dstname)

#endif /* InstallNamedProg */


/*
 * InstallMultipleDestFlags - generate rules to install multiple files at
 * once during a particular step in the build using a specific set of install 
 * flags.
 */
#ifndef InstallMultipleDestFlags
#define InstallMultipleDestFlags(step,list,dest,flags)			@@\
step:: list								@@\
	MakeDir($(DESTDIR)dest)						@@\
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \			@@\
	for i in list; do \						@@\
		(set -x; $(INSTALL) $(INSTALLFLAGS) flags $$i $(DESTDIR)dest); \	@@\
	done
#endif /* InstallMultipleDestFlags */


/*
 * InstallMultipleDest - generate rules to install multiple files at once
 * during a particular step in the build using any install flags set in 
 * $(INSTDATFLAGS).
 */
#ifndef InstallMultipleDest
#define InstallMultipleDest(step,list,dest)				@@\
InstallMultipleDestFlags(step,list,dest,$(INSTDATFLAGS))
#endif /* InstallMultipleDest */

/*
 * InstallMultiple - generate rules to install multiple files at once 
 * during the install step of the build using any install flags set in 
 * $(INSTALLFLAGS).
 */
#ifndef InstallMultiple
#define	InstallMultiple(list,dest)					@@\
InstallMultipleDest(install,list,dest)
#endif /* InstallMultiple */


/*
 * InstallMultipleFlags - generate rules to install multiple files at once
 * during the install step of the build using the given install flags.
 */
#ifndef InstallMultipleFlags
#define InstallMultipleFlags(list,dest,flags)				@@\
InstallMultipleDestFlags(install,list,dest,flags)
#endif /* InstallMultipleFlags */


/*
 * InstallMultipleMan - generate rules to install a variety of manual pages
 * during the install.man step of the build.
 */
#ifndef InstallMultipleMan
#define InstallMultipleMan(list,dest)					@@\
InstallMultipleDestFlags(install.man,list,dest,$(INSTMANFLAGS))
#endif /* InstallMultipleMan */
