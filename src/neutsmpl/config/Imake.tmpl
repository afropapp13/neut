/* $Id: Imake.tmpl,v 1.1.1.1 2016/11/04 20:29:55 mdunkman Exp $
 *
 * $Log: Imake.tmpl,v $
 * Revision 1.1.1.1  2016/11/04 20:29:55  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.25  2003/02/21 18:25:04  mcgrew
 * Add the -lthreads to ExtraLibraries in sun.cf, and update linux.cf so
 * it can handle threads as well.  Also fix a couple of minor bugs in
 * imake.cshrc and imake.profile that I've had in my directories for a
 * long time.  The new imake.[whatever] scripts correctly handle
 * fallback...
 *
 * Revision 1.24  1999/07/21 13:45:03  mcgrew
 * There are default make depend targets at the end of the Imake.tmpl:
 * One for C.  One for fortran.  Make sure that the second doesn't over
 * write the results of the first.
 *
 * Revision 1.23  1999/04/27 14:55:28  sharkey
 * Clark made some changes to Imake.tmpl recently which forced a "depend" target
 * to exist even if SRCS is not defined in the Imakefile.  The problem is that
 * he set CSRCS equal to $(wildcard *[c]) and FSRCS to $(wildcard *[F]).  This
 * is *not* a good thing to do since the first expression also matches "*.inc"
 * files, as well as a directories like "Linux_pc".  The result was that "make
 * depend" would try to calculate the dependencies of a directory, which would
 * result in a crash since a directory cannot be read as a normal file.  At
 * least not by makedepend.
 *
 * Changing these expressions to *.[c] and *.[F] seem to alleviate the problem.
 *
 * Revision 1.22  1999/04/16 07:17:10  mcgrew
 * Do the depends for C and Fortran separately.
 *
 * Revision 1.21  1999/04/16 06:40:57  mcgrew
 * Force the existence of a depend target and fill SRCS with a wild card
 * if it is not explicitly filled.  This makes sure that make depend
 * really makes the depends.
 *
 * Revision 1.20  1999/03/23 07:26:21  mcgrew
 * Make sure that commands passed in on the imake_boot command line get
 * passed to all subsequent imake commands.
 *
 * Revision 1.19  1999/01/31 01:44:49  mcgrew
 * Enable passing the command line and package defines through a make
 * Makefile command.
 *
 * Revision 1.18  1999/01/31 01:22:45  mcgrew
 * Add Package and Project .def files that are loaded immediately after
 * the site.def files and before the defaults.tmpl file.  This lets the
 * Package and Project override variables used to define the rules.
 * The Package and Project files are the only files that should be
 * changed in the config directories to customise for a particular
 * library or experiment.
 *
 * Revision 1.17  1998/01/28 00:32:54  skuci
 * Added missing quite. --Tomasz.
 *
 * Revision 1.16  1997/09/18 14:17:59  superk
 * Chris Walter's Imake changes to allow c++ code to compile.
 *
 * Revision 1.15  1997/06/10 18:04:23  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
# Revision 1.14  1997/06/03  16:28:20  mcgrew
# Backslashes are your friend.  Except I left a friend out.
#
# Revision 1.13  1997/06/03  15:36:37  mcgrew
# Add the site libraries to the ldlibs.
#
# Revision 1.12  1997/05/27  15:55:13  mcgrew
# Add patches to keep compadible with the K2K config files.
#
 * Revision 1.13  1997/05/19 15:11:49  kenzo
 * AHHHHH!!!! Last minute panic changes to get fgsim (and fortran in
 * general) to compile on the ccps.
 *
 * Revision 1.12  1997/05/19 06:54:22  mcgrew
 * Add the hitachi machines (ccps1 to ccps6) to imake.
 *
 * Revision 1.11  1997/05/18 08:25:55  mcgrew
 * General clean up and rearrangements before turning these files loose
 * on the world.
 *
 * Revision 1.10  1997/05/17 08:13:06  mcgrew
 * Fixes to work at KEK on pnahp
 *
 * Revision 1.9  1997/05/07 06:14:56  mcgrew
 * Make sure the private libraries are in the path before the public
 * libraries and don't append a release version to private_root.
 *
 * Revision 1.8  1997/05/06 10:00:42  mcgrew
 * More bug fixes to make these config files compile the sk libraries.
 *
 * Revision 1.7  1997/05/04 05:22:36  mcgrew
 * Added some more private overide files and fixed for linux.
 *
 * Revision 1.6  1997/05/02 11:03:50  mcgrew
 * Some minor bug fixes found while building the SuperK libraries.
 *
 * Revision 1.5  1997/04/28 06:52:52  mcgrew
 * Change the bin target to exec so that it's compadible with the older
 * Imakefiles.
 *
 * Revision 1.4  1997/04/28 06:13:23  mcgrew
 * Bug fixes to make the off-site libraries compile.
 *
 * Revision 1.3  1997/04/27 11:46:28  mcgrew
 * First almost working version of the Imake config files.
 *
 * Revision 1.2  1997/04/27 05:05:46  mcgrew
 * partially adapted to SK
 *
 * Revision 1.1.1.1  1997/04/26 08:45:48  mcgrew
 * import config files
 *
 * Revision 1.2  1995/12/21  11:32:08  cernlib
 * Imake files end 1995
 *
 * Revision 1.1.1.1  1995/12/20  15:26:43  cernlib
 * X11R6 config files unmodified
 *
 *
 */
#define XCOMM #
XCOMM ----------------------------------------------------------------------
XCOMM Makefile generated from IMAKE_TEMPLATE and INCLUDE_IMAKEFILE
XCOMM $XConsortium: Imake.tmpl,v 1.224.1.1 95/06/19 17:51:01 gildea Exp $
XCOMM

/*
 * generic imake template
 */

XCOMM emptyrule is needed to avoid picking a default rule from
XCOMM included files. This forces the user to always specify a target.  I
XCOMM think this is a good thing, but others may disagree.  If you want a
XCOMM default target, then change it here.

emptyrule::

/*
 * Modify Imake.cf when adding a new architecture, do not modify this file.
 * Platform-specific parameters may be set in the appropriate <vendor>.cf
 * configuration files.  Site-specific parameters should be set in the file
 * site.def.  Full rebuilds are recommended if any parameters are changed.
 * If your C preprocessor does not define any unique symbols, you will need
 * to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
 * "make World" the first time).
 */

#define ImakeConfigRelease 6

#define	YES	1
#define NO	0

XCOMM This file always uses the installed system utilities.  To
XCOMM override, use site.p-def.
#ifndef UseInstalled
#  define UseInstalled YES
#endif

.SUFFIXES: .i

#include <Imake.cf>

XCOMM -----------------------------------------------------------------------
XCOMM site-specific configuration parameters that need to come before
XCOMM the platform-specific parameters - edit site.def to change
#define BeforeVendorCF
#include "site.p-def"
#include <site.def>
#undef BeforeVendorCF

#if defined(HasGcc2) && !defined(HasGcc)
#define HasGcc HasGcc2
#endif

XCOMM -----------------------------------------------------------------------
XCOMM platform-specific configuration parameters - edit MacroFile to change
#include PrivateMacroIncludeFile
#include MacroIncludeFile

XCOMM -----------------------------------------------------------------------
XCOMM site-specific configuration parameters that go after
XCOMM the platform-specific parameters - edit site.def to change
#define AfterVendorCF
#include "site.p-def"
#include <site.def>
#undef AfterVendorCF

XCOMM -----------------------------------------------------------------------
XCOMM These may be set in Package.def, or Project.def.  These are used
XCOMM to make sure that the "make Makefile" command works correctly.
      BOOT_DEFINES = /* Leave Blank.  Creating variable for later. */
     BOOT_INCLUDES = /* Leave Blank.  Creating variable for later. */

XCOMM -----------------------------------------------------------------------
XCOMM This is the command line from imake_boot
COMMAND_LINE = CMDLINE

XCOMM -----------------------------------------------------------------------
XCOMM Set the defaults for the current package being compiled.  The
XCOMM package is set on the command line with "imake_boot -Dpackage"
#include "Package.p-def"
#include <Package.def>

XCOMM -----------------------------------------------------------------------
XCOMM Set the defaults for the current project being compiled.  
#include "Project.p-def"
#include <Project.def>

XCOMM -----------------------------------------------------------------------
XCOMM Fill all of the options that could have been set in site.def or
XCOMM the .cf file with default values.
#include <defaults.tmpl>

XCOMM -----------------------------------------------------------------------
XCOMM Set the machine dependent variables.
ifeq ($(strip $(MACHINE)),)
  ifeq ($(strip $(MACHINE_DIR)),)
     MACHINE=MachineDir
  else
     MACHINE=$(MACHINE_DIR)
  endif
endif

XCOMM Set the prefix for machine dependent files.  This is mostly for
XCOMM object files, but libraries and executables are prepended with
XCOMM OBJPREFIX. 
        OBJPREFIX = ObjectPrefix

XCOMM 

XCOMM -----------------------------------------------------------------------
XCOMM Allow Imake.rules rules to be overridden.
#include "Imake.p-rules"

XCOMM Include the standard Imake.rules.
#include <Imake.rules>

XCOMM Some extra rules if we have fortran.
#ifndef FortranRulesFile
/* need this to make ANSI-style preprocessors happy */
#define FortranRulesFile <noop.rules>
#endif
    FORTRAN_RULES = FortranRulesFile
#include FortranRulesFile

XCOMM The config files that might change and require the Makefile to
XCOMM be rebuilt.
#ifndef SiteIConfigFiles
#define SiteIConfigFiles /* The Project.tmpl or site.def config files. */
#endif
     ICONFIGFILES = $(IRULESRC)/Imake.tmpl \
			$(IRULESRC)/Project.tmpl \
			$(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE) \
			$(IRULESRC)/defaults.tmpl \
			$(IRULESRC)/Imake.rules \
			$(IRULESRC)/commands.tmpl \
			$(IRULESRC)/macros.tmpl \
			$(IRULESRC)/paths.tmpl \
			$(IRULESRC)/Threads.tmpl \
			SiteIConfigFiles $(EXTRA_ICONFIGFILES)

#include "commands.p-tmpl"
#include <commands.tmpl>

#include <macros.tmpl>

#ifdef UseInstalled
#if AlternateIncRoot
     TOP_INCLUDES = -I$(INCROOT)	/* def: for alternative /usr/include */
#endif
#else
     TOP_INCLUDES = -I$(TOP)		/* def: for builds within tree */
#endif

XCOMM  STD_INCLUDES contains system-specific includes
XCOMM  TOP_INCLUDES specifies how to get to /usr/include or 
XCOMM               its build substitute
XCOMM  PACKAGE_INCLUDES gives include files for a given working-group.
XCOMM  EXPERIMENT_INCLUDES are project-specific includes set in
XCOMM               project incfiles 
XCOMM  SITE_INCLUDES are defined in site.def
XCOMM  INCLUDES are client-specific includes set in Imakefile
      ALLINCLUDES = $(INCLUDES) \
		$(PACKAGE_INCLUDES) \
		$(EXPERIMENT_INCLUDES) \
		$(SITE_INCLUDES) \
		$(TOP_INCLUDES) \
		$(STD_INCLUDES)

  FORTRANINCLUDES = $(PACKAGE_FORTRAN_INCLUDES) \
			$(EXPERIMENT_FORTRAN_INCLUDES) 

XCOMM STD_DEFINES are system-specific defines (set in .cf)
XCOMM EXPERIMENT_DEFINES are project-specific defines (set in
XCOMM		Project.tmpl)
XCOMM PACKAGE_DEFINES are working-group specific defines.
XCOMM SITE_DEFINES are defined in site.def.
XCOMM EXPERIMENTDEFINES are the machine type and system type for vender.cf
XCOMM DEFINES is set in the Imakefile.
XCOMM The other _DEFINES are internal to Imake.
       ALLDEFINES = $(ALLINCLUDES) \
		$(STD_DEFINES) \
		$(SITE_DEFINES) \
		$(EXPERIMENT_DEFINES) \
		$(PACKAGE_DEFINES) \
		$(PROTO_DEFINES) \
		$(THREADS_DEFINES) \
		$(EXTRA_DEFINES) \
		$(DEFINES) \
		$(CCDEFINES) \
		$(EXPERIMENTDEFINES)

XCOMM The flags passed to the C compiler.  Users should use
XCOMM CDEBUGFLAGS to control debugging from the command line.
           CFLAGS = $(CDEBUGFLAGS) \
			$(CCOPTIONS) \
			$(THREADS_CFLAGS) \
			$(ALLDEFINES)

XCOMM The flags passed to the C++ compiler.  Users should use
XCOMM CDEBUGFLAGS to control debugging from the command line.
           CXXFLAGS = $(CXXDEBUGFLAGS) \
			$(CXXOPTIONS) \
			$(THREADS_CFLAGS) \
			$(ALLDEFINES)

XCOMM The flags passed to lint
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES) $(DEPEND_DEFINES)

XCOMM ------------------------------------------------------------ 
XCOMM The flags to pass to the linker/loader.
XCOMM EXTRA_LDOPTIONS is defined in the .cf or machine specific rules file.
XCOMM LOCAL_LDFLAGS   is defined in the Imakefile.
XCOMM EXPERIMENT_LDOPTIONS is defined for the experiment in Project.tmpl
XCOMM PACKAGE_LDOPTIONS is defined for the package in Package.tmpl
XCOMM EXPERIMENT_LDPATHS is defined in paths.tmpl using EXPERIMENT_ROOT
XCOMM PACKAGE_LDPATHS is defined in paths.tmpl using PACKAGE_ROOT
XCOMM SITE_LDOPTIONS is defined in the site.def file.
XCOMM The other definitions are used internally by Imake.

PROJECT_LDOPTIONS = $(PACKAGE_LDPATHS) $(EXPERIMENT_LDPATHS) \
			$(SITE_LIBRARIES) \
			$(EXPERIMENT_LDOPTIONS) $(PACKAGE_LDOPTIONS) \
			$(SITE_LDOPTIONS)

XCOMM For C
        LDOPTIONS = $(CDEBUGFLAGS) \
			$(CCOPTIONS) \
			$(EXTRA_LDOPTIONS) \
			$(THREADS_LDFLAGS) \
			$(PROJECT_LDOPTIONS) \
			$(LOCAL_LDFLAGS) \
			$(LDPRELIB)

XCOMM For C++
     CXXLDOPTIONS = $(CXXDEBUGFLAGS) \
			$(CXXOPTIONS) \
			$(EXTRA_LDOPTIONS) \
			$(THREADS_CXXLDFLAGS) \
			$(PROJECT_LDOPTIONS) \
			$(LOCAL_LDFLAGS) \
			$(LDPRELIB)

XCOMM For fortran.
      FCLDOPTIONS = FortranLoadFlags $(FDEBUGFLAGS) \
			$(FORTRANOPTIONS) \
			$(EXTRA_LDOPTIONS) \
			$(THREADS_LDFLAGS) \
			$(PROJECT_LDOPTIONS) \
			$(LOCAL_LDFLAGS) \
			$(LDPRELIB)

XCOMM The librarys that must be included.
XCOMM EXTRA_LIBRARIES is defined by "ExtraLibraries" in the .cf files.
XCOMM SITE_LIBRARIES is defined in site.def.
XCOMM SYS_LIBRARIES is a synonym for SITE_LIBRARIES
           LDLIBS = $(LDPOSTLIB) \
			$(THREADS_LIBS) \
			$(SITE_LIBRARIES) \
			$(SYS_LIBRARIES) \
			$(EXTRA_LIBRARIES)

        MACROFILE = MacroFile

XCOMM --------------------------------------------------------
XCOMM Get the package specific configuration and rules.  The package
XCOMM is a part of the project (for instance an analysis group that is part
XCOMM of an experiment).  
XCOMM
#include "Package.p-tmpl"
#include <Package.tmpl>

XCOMM --------------------------------------------------------
XCOMM get project-specific configuration and rules.  A project is the
XCOMM over all project being worked on.  For instance, an experiment.
XCOMM
#include "Project.p-tmpl"
XCOMM --------------------------------------------------------
#include <Project.tmpl>

XCOMM Include a possible TMPL file for the local package.  This might
XCOMM be defined in the package template so that individual libraries in the 
XCOMM package can have thier own template file.
#ifndef LocalTmplFile
/* need this to make ANSI-style preprocessors happy */
#define LocalTmplFile <noop.rules>
#endif
#include LocalTmplFile

#ifdef FixupLibReferences
FixupLibReferences()
#endif

XCOMM --------------------------------------------------------
XCOMM All of the other template files that might define paths have
XCOMM been loaded.  Now define the default set of paths.
#include "paths.p-tmpl"
#include <paths.tmpl>

XCOMM --------------------------------------------------------
XCOMM Define the Threads libraries.  If the project is not threaded, this 
XCOMM is mostly a noop.
#include <Threads.tmpl>

/* add definitions for PACKAGE_INCLUDE */
#ifndef PackageTop
#define PackageTop 	/* nothing */
#endif
#ifndef PackageName
#define PackageName 	/* nothing */
#endif
#ifndef LocalTop
#define LocalTop 	/* nothing */
#endif
#ifndef ExperimentSystem
#define ExperimentSystem	/* nothing, but this should not happen GF.*/
#endif
	EXPERIMENTDEFINES=ExperimentSystem
        PACKAGETOP=PackageTop
        PACKAGE_NAME=PackageName
	LOCALTOP=LocalTop

	VPATH=$(PROJECTROOT)$(LOCALTOP)$(CURRENT_DIR)

/* Standard names needed */


OBJS_C=$(SRCS_C:.c=.o)			/* Objects created from C */
OBJS_F=$(SRCS_F:.F=.o)			/* Objects created from Fortran */
OBJS_CDF=$(SRCS_CDF:.cdf=.o)		/* cdf -> c -> object file */

OBJS=$(OBJS_C) $(OBJS_CXX) $(OBJS_F) $(OBJS_CDF)

XCOMM -----------------------------------------------------------------------
XCOMM start of Imakefile : INCLUDE_IMAKEFILE
#include INCLUDE_IMAKEFILE

XCOMM -----------------------------------------------------------------------
XCOMM common rules for all Makefiles - do not edit

.c.i:
	CPPOnlyCompile($*.c,$(_NOOP_))
XCOMM These need to be here so that rules in Imakefile occur first;  the blank
XCOMM emptyrule is to make sure that an empty Imakefile does not default to
XCOMM  make clean.
emptyrule::

CleanTarget()

#ifndef IHaveSpecialMakefileTarget
MakefileTarget()
#endif

TagsTarget()
#ifdef MakefileAdditions
MakefileAdditions()
#endif

#if HasCodeCenter
CenterLoadTarget(debug_src,$(SRCS),NullParameter,$(ALLDEFINES))

CenterLoadTarget(debug_obj,$(OBJS),NullParameter,$(ALLDEFINES))
#endif

XCOMM Principle of least surprise says that install installs the libraries.
install:: install.lib

#ifdef IHaveSubdirs
XCOMM -----------------------------------------------------------------------
XCOMM rules for building in SUBDIRS - do not edit

InstallSubdirs($(SUBDIRS))
InstallLibSubdirs($(SUBDIRS))
InstallManSubdirs($(SUBDIRS))
InstallLinkKitSubdirs($(SUBDIRS))
InstallIncludeSubdirs($(SUBDIRS))
InstallExecSubdirs($(SUBDIRS))
CleanSubdirs($(SUBDIRS))
ExecSubdirs($(SUBDIRS))
TagSubdirs($(SUBDIRS))
MakefileSubdirs($(SUBDIRS))
IncludesSubdirs($(SUBDIRS))
ForceSubdirs($(SUBDIRS))
DependSubdirs($(SUBDIRS))
MakeSubdirsMakefiles($(SUBDIRS),tree)

#else
XCOMM -----------------------------------------------------------------------
XCOMM empty rules for directories that do not have SUBDIRS - do not edit

install:: 
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

install.linkkit::
	@echo "install.linkkit in $(CURRENT_DIR) done"

install.include::

install.lib::

install.exec::

Makefiles::

includes::

depend::

tags::

exec::

tree::
	@true

all::

#endif /* if subdirectory rules are needed */

ifeq ($(strip $(SRCS)),)
    CSRCS = $(wildcard *.[c])
    FSRCS = $(wildcard *.[F])

NamedDependTarget($(ALLDEFINES) $(DEPEND_DEFINES), $(CSRCS))

NamedDependTargetWithFlags(-a $(DEPENDFLAGS), $(FORTRANALLDEFINES) $(DEPEND_DEFINES), $(FSRCS))

endif

XCOMM -----------------------------------------------------------------------
XCOMM dependencies generated by makedepend
