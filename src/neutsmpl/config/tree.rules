/* $Id: tree.rules,v 1.1.1.1 2016/11/04 20:29:56 mdunkman Exp $
 * 
 * Targets to recursively build in a directory tree.
 *
 * $Log: tree.rules,v $
 * Revision 1.1.1.1  2016/11/04 20:29:56  mdunkman
 * Import of NEUT 5.3.3 v1r27 for use with T2KReWeight v1r27 (Winter OA 2017)
 *
 * Revision 1.3  1998/01/06 21:13:08  mcgrew
 * Remove the MFLAGS and MAKEFLAGS cruft.  This was included to work
 * around different "make" behaviours, but we now require GNUmake and it
 * "does the right thing".
 *
 * Revision 1.2  1997/08/29 22:56:10  superk
 * Fix of double recurency for target 'all'.
 * Added distinctive messages for various 'install' targets. --Tomasz.
 *
 * Revision 1.1  1997/06/10 18:04:38  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 */

XCOMM -------------------------------------------------------------
XCOMM Targets to build recusively down a subdirectory tree. 

#ifndef MakeSubincludesForBuild
#define MakeSubincludesForBuild(step,dir,srclist)			@@\
step::  dir srclist							@@\
	@-(list=`echo srclist | sed -e 's/[^ ]*\///g'`; \		@@\
		set -x; cd dir; RemoveFiles($$list))			@@\
	@for i in srclist; do \						@@\
		(set -x; cd dir; $(LN) ../$$i .); \			@@\
	done								@@\
									@@\
dir::									@@\
	$(MKDIRHIER) dir						@@\
									@@\
clean::									@@\
	@-(if [ -d dir ]; then \					@@\
		list=`echo srclist | sed -e 's/[^ ]*\///g'`; \		@@\
		set -x; cd dir; RemoveFile($$list); else exit 0; fi)
#endif


/*
 * NamedTargetSubdirs - recursively make a series of steps
 */
#ifndef NamedTargetSubdirs
#define NamedTargetSubdirs(name,dirs,verb,flags,subname)		@@\
name::  $(foreach dir,dirs,$(dir)/Makefile)				@@\
									@@\
name::									@@\
	@set -e; \							@@\
	case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@\
	for i in dirs ;\						@@\
	do \								@@\
		(cd $$i ; echo verb "in $(CURRENT_DIR)/$$i..."; \	@@\
			$(MAKE) flags subname)||exit $$?; \	@@\
	done
#endif


/*
 * NamedMakeSubdirs - generate rules to do makes in the given subdirectories.
 * If you want CDEBUGFLAGS passed along to subdirectories, provide a line like
 * the following in the appropriate Imakefile
 * 
 *         #define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'
 */
#ifndef NamedMakeSubdirs
#define NamedMakeSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"making" name,PassCDebugFlags,all)
#endif /* NamedMakeSubdirs */

#ifndef MakeSubdirs
#define MakeSubdirs(dirs)						@@\
NamedMakeSubdirs(all,dirs)
#endif /* MakeSubdirs */


/*
 * DependSubdirs - generate rules to recursively compute dependencies as
 * part of the make depend step.
 */
#ifndef DependSubdirs
#define DependSubdirs(dirs) \
NamedTargetSubdirs(depend,dirs,"depending",NullParameter,depend)
#endif /* DependSubdirs */


/*
 * ForceSubdirs - force make to build subdirectories
 */
#ifndef ForceSubdirs
#define ForceSubdirs(dirs)						@@\
XCOMM Commented out - temporary fix (Tomasz)				@@\
XCOMM dirs: FRC								@@\
XCOMM 	@cd $@ ; echo "making all in $(CURRENT_DIR)/$@..."; \		@@\
XCOMM 	$(MAKE) $(MFLAGS) PassCDebugFlags all				@@\
XCOMM 									@@\
XCOMM FRC:								@@\
									@@\
all:: dirs								@@\
	@echo "Recursion through" dirs "done"
#endif /* ForceSubdirs */

/*
 * InstallSubdirs - generate rules to recursively install programs and files.
 */
#ifndef InstallSubdirs
#define InstallSubdirs(dirs) \
NamedTargetSubdirs(install,dirs,"installing",DESTDIR=$(DESTDIR),install)
#endif /* InstallSubdirs */

/*
 * InstallLibSubdirs - generate rules to recursively install Libraries
 */
#ifndef InstallLibSubdirs
#define InstallLibSubdirs(dirs) \
NamedTargetSubdirs(install.lib,dirs,"installing libraries",DESTDIR=$(DESTDIR),install.lib)
#endif /* InstallSubdirs */

/*
 * InstallExecSubdirs - generate rules to recursively install programs and
 *		       scripts
 */
#ifndef InstallExecSubdirs
#define InstallExecSubdirs(dirs) \
NamedTargetSubdirs(install.exec,dirs,"installing executables",DESTDIR=$(DESTDIR) \
PACKAGE_LIB=$(PACKAGE_LIB),install.exec)
#endif /* InstallSubdirs */

/*
 * InstallIncludeSubdirs - rules to install recursively install includes
 */
#ifndef InstallIncludeSubdirs
#define InstallIncludeSubdirs(dirs) \
NamedTargetSubdirs(install.include,dirs,"installing include files",DESTDIR=$(DESTDIR) \
,install.include)
#endif /* InstallSubdirs */

/*
 * InstallManSubdirs - generate rules to recursively install manual pages.
 */
#ifndef InstallManSubdirs
#define InstallManSubdirs(dirs) \
NamedTargetSubdirs(install.man,dirs,"installing man pages",DESTDIR=$(DESTDIR),install.man)
#endif /* InstallManSubdirs */


/*
 * IncludesSubdirs - generate rules to recursively put include files in build
 */
#ifndef IncludesSubdirs
#define IncludesSubdirs(dirs) \
NamedTargetSubdirs(includes,dirs,including,NullParameter,includes)
#endif


/*
 * InstallLinkKitSubdirs - generate rules to recursively install server Link
 *                         Kit (only used for XFree86). This is a no-op
 *                         rule so that Imakefiles on non-XFree86 systems
 *                         continue to build Makefiles correctly.
 */
#ifndef InstallLinkKitSubdirs
#define InstallLinkKitSubdirs(dirs)
#endif


/*
 * CleanSubdirs - generate rules to recursively clean out garbage files.
 */
#ifndef NamedCleanSubdirs
#define NamedCleanSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"cleaning",NullParameter,clean)
#endif /* NamedCleanSubdirs */

#ifndef CleanSubdirs
#define CleanSubdirs(dirs) \
NamedCleanSubdirs(clean,dirs)
#endif


/*
 * TagSubdirs - generate rules to recursively create tags files.
 */
#ifndef NamedTagSubdirs
#define NamedTagSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"tagging",TAGS='$(TAGS)',tags)
#endif /* TagSubdirs */

#ifndef TagSubdirs
#define TagSubdirs(dirs) \
NamedTagSubdirs(tags,dirs)
#endif

/*
 * ExecSubdirs - generate rules to recursively create execs files.
 */
#ifndef NamedExecSubdirs
#define NamedExecSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"linking",NullParameter,exec)
#endif /* TagSubdirs */

#ifndef ExecSubdirs
#define ExecSubdirs(dirs) \
NamedExecSubdirs(exec,dirs)
#endif


/*
 * MakeLintSubdirs - generate rules to recursively lint directories as part 
 * of the named step.
 */
#ifndef MakeLintSubdirs
#define MakeLintSubdirs(dirs,target,subtarget) \
NamedTargetSubdirs(target,dirs,"linting" for target and subtarget,DESTDIR=$(DESTDIR) LINTOPTS='$(LINTOPTS)',subtarget)
#endif /* MakeLintSubdirs */


/*
 * LintSubdirs - generate rules to recursively lint directories as part of 
 * the make lint step.
 */
#ifndef LintSubdirs
#define LintSubdirs(dirs)						@@\
MakeLintSubdirs(dirs,lint,lint)
#endif /* LintSubdirs */


/*
 * MakeLintLibSubdirs - generate rules to recursively create lint libraries.
 */
#ifndef MakeLintLibSubdirs
#define MakeLintLibSubdirs(dirs)					@@\
MakeLintSubdirs(dirs,lintlib,lintlib)
#endif /* MakeLintLibSubdirs */


/*
 * MakeMakeSubdirs - generate rules to recursively recreate Makefiles as part
 * of the specified step in the build.  If $(TOP) is set to an absolute path, 
 * do not prepend the ../ prefix.  This makes running things outside of the 
 * source tree to be much easier.
 */
#ifndef MakeMakeSubdirs
#define MakeMakeSubdirs(dirs,target)					@@\
target::								@@\
	-@case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@\
	case '${MFLAGS}' in *n*) executeit="no";; esac; \		@@\
	for i in dirs ;\						@@\
	do \								@@\
		case "$(CURRENT_DIR)" in \				@@\
		.) curdir= ;; \						@@\
		*) curdir=$(CURRENT_DIR)/ ;; \				@@\
		esac; \							@@\
		echo "making Makefiles in $$curdir$$i..."; \		@@\
		itmp="$$i" \						@@\
		curtmp="$(CURRENT_DIR)" \				@@\
		toptmp=""; \						@@\
		case "$$itmp" in \					@@\
		    ../?*) \ 						@@\
			while echo "$$itmp" | grep '^../' > /dev/null;\	@@\
			  do \						@@\
			     toptmp="/`basename $$curtmp`$$toptmp"; \	@@\
			     curtmp="`dirname $$curtmp`"; \		@@\
			     itmp="`echo $$itmp | sed 's;../;;'`"; \	@@\
			  done \					@@\
		    ;; \						@@\
		esac; \							@@\
		case "$$itmp" in \					@@\
		*/?*/?*/?*/?*)	newtop=../../../../..;; \		@@\
		*/?*/?*/?*)	newtop=../../../..;; \			@@\
		*/?*/?*)	newtop=../../..;; \			@@\
		*/?*)		newtop=../..;; \			@@\
		*)		newtop=..;; \				@@\
		esac; \							@@\
		newtop="$$newtop$$toptmp"; \				@@\
		case "$(TOP)" in \					@@\
		/?*) imaketop=$(TOP) \					@@\
		     imakeprefix= ;; \					@@\
		.) imaketop=$$newtop \					@@\
		   imakeprefix=$$newtop/ ;; \				@@\
		*) imaketop=$$newtop/$(TOP) \				@@\
		   imakeprefix=$$newtop/ ;; \				@@\
		esac; \							@@\
		cd $$i; \						@@\
		RemoveFile(Makefile.bak); \				@@\
		if [ -f Makefile ]; then \				@@\
			echo "	$(MV) Makefile Makefile.bak"; \		@@\
			if [ "$$executeit" != "no" ]; then \		@@\
				$(MV) Makefile Makefile.bak; \		@@\
			fi; \						@@\
		fi; \							@@\
		if [ "$$executeit" != "no" ]; then \			@@\
			ImakeSubCmdHelper -DTOPDIR=$$imaketop \		@@\
			-DCURDIR=$$curdir$$i \				@@\
			-DPackageTop=$(PACKAGETOP) \			@@\
			-DPackageName=$(PACKAGE_NAME); \		@@\
		fi; \							@@\
		$(MAKE) Makefiles; \				@@\
		cd $$newtop; \						@@\
	done

#ifdef UseInstalled
#define ImakeSubCmdHelper $(IMAKE_CMD)
#else
#define ImakeSubCmdHelper $$imakeprefix$(IMAKE) -I$$imakeprefix$(IRULESRC) $(IMAKE_DEFINES)
#endif

#endif /* MakeMakeSubdirs */


/*
 * MakefileSubdirs - generate rules to create Makefiles.
 */
#ifndef MakefileSubdirs
#define MakefileSubdirs(dirs)\
									@@\
MakeMakeSubdirs(dirs,Makefiles)
#endif /* MakefileSubdirs */

/*
 * MakeSubdirsMakefiles - generate rules to create subdirectories and Makefiles
 */
#ifndef MakeSubdirsMakefiles
#define MakeSubdirsMakefiles(dirs,target)\
									@@\
NamedTargetSubdirs(target,dirs,Checking Makefiles,VERSION=nil,target)   @@\
MakeSubdirMakefile(dirs)
#endif
/*
 * MakeSubdirMakefile - rule to create subdirectory/Makefile, one at a time
 */
#ifndef MakeSubdirMakefile
#define MakeSubdirMakefile(dirs)\
									@@\
$(foreach dir,dirs,$(dir)/Makefile):					@@\
	-@case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@\
	case '${MFLAGS}' in -*n*) executeit="no";; esac; \		@@\
	i=`dirname $@`; \						@@\
	case "$(CURRENT_DIR)" in \					@@\
	.) curdir= ;; \							@@\
	*) curdir=$(CURRENT_DIR)/ ;; \					@@\
	esac; \								@@\
	echo "making Makefiles in $$curdir$$i..."; \			@@\
	itmp="$$i" \							@@\
	curtmp="$(CURRENT_DIR)" \					@@\
	toptmp=""; \							@@\
	case "$$itmp" in \						@@\
	    ../?*) \ 							@@\
		while echo "$$itmp" | grep '^../' > /dev/null;\		@@\
		  do \							@@\
		     toptmp="/`basename $$curtmp`$$toptmp"; \		@@\
		     curtmp="`dirname $$curtmp`"; \			@@\
		     itmp="`echo $$itmp | sed 's;../;;'`"; \		@@\
		  done \						@@\
	    ;; \							@@\
	esac; \								@@\
	case "$$itmp" in \						@@\
	*/?*/?*/?*/?*)	newtop=../../../../..;; \			@@\
	*/?*/?*/?*)	newtop=../../../..;; \				@@\
	*/?*/?*)	newtop=../../..;; \				@@\
	*/?*)		newtop=../..;; \				@@\
	*)		newtop=..;; \					@@\
	esac; \								@@\
	newtop="$$newtop$$toptmp"; \					@@\
	case "$(TOP)" in \						@@\
	/?*) imaketop=$(TOP) \						@@\
	     imakeprefix= ;; \						@@\
	.) imaketop=$$newtop \						@@\
	   imakeprefix=$$newtop/ ;; \					@@\
	*) imaketop=$$newtop/$(TOP) \					@@\
	   imakeprefix=$$newtop/ ;; \					@@\
	esac; \								@@\
	if [ ! -d $$i ]; then \						@@\
		MkdirHierCmd $$i; \					@@\
	fi; \								@@\
	cd $$i; \							@@\
	RemoveFile(Makefile.bak); \					@@\
	if [ -f Makefile ]; then \					@@\
		true;		\					@@\
	else \								@@\
		for imakedir in $$newtop $(VPATH); do \			@@\
		   imakefile=`echo $$imakedir/$$i/Imakefile | \		@@\
		      sed -e 's://:/:'`; \				@@\
		   if [ -f $$imakefile ]; then break;fi; \		@@\
		done; \							@@\
		if [ ! -f $$imakefile ]; then \				@@\
		   echo "No Imakefile found --> exit"; \		@@\
		   exit 1; \						@@\
		fi; \							@@\
		if [ "$$executeit" != "no" ]; then \			@@\
			ImakeSubCmdHelper -DTOPDIR=$$imaketop \		@@\
			-DCURDIR=$$curdir$$i \				@@\
			-DPackageTop=$(PACKAGETOP) \			@@\
			-DPackageName=$(PACKAGE_NAME) \			@@\
			-f $$imakefile; \				@@\
		fi; \							@@\
	fi;
#endif

/*
 *  Delegate a target to a sub directory (or directories)
 */
#ifndef DelegateTarget
#define DelegateTarget(target,dirs)\
NamedTargetSubdirs(target,dirs,Makeing target,NullParameter,target)
#endif

/*
 * TestSubdirs - generate rules to recursively build and run tests.
 */
#ifndef NamedTestSubdirs
#define NamedTestSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"testing",PACKAGE_LIB=$(PACKAGE_LIB),test)
#endif /* TestSubdirs */

#ifndef TestSubdirs
#define TestSubdirs(dirs) \
NamedTestSubdirs(test,dirs)
#endif

/*
 * SubdirDataFile - rule to build a data file in subdir
 *
 */
#ifndef SubdirDataFile
#define SubdirDataFile(target,file,subdir)				@@\
target:: file								@@\
									@@\
NamedTargetSubdirs(file,subdir,Makeing file,PACKAGETOP=$(PACKAGETOP),$(TOP)$(CURRENT_DIR)/file)
#endif




