/* $Id: programs.rules,v 1.1 2007-01-20 07:35:47 skrep Exp $
 * 
 * Targets to link programs.
 *
 * $Log: not supported by cvs2svn $
 * Revision 1.3  1997/12/19 02:43:58  mcgrew
 * Fix the NormalCplusplusProgramTarget so that it will build the exec
 * using just the exec name and not the machine path.
 *
 * Revision 1.2  1997/06/18 23:50:01  superk
 * SGI's lameo cpp tries to expand imake targets even when they're in a comment.
 * Some letters changed cases in comments to avoid this.  -ATH
 *
 * Revision 1.1  1997/06/10 18:04:37  mcgrew
 * Many changes so that these config files work in a
 * multiple-architecture environment.
 *
 */

XCOMM -------------------------------------------------------------
XCOMM Define special targets for special compilers.  These are seldom
XCOMM used and are here to deal with vendor idiosyncrasies (idiocies).
XCOMM -------------------------------------------------------------
/*
 * CenterLoadTarget - generate rules to load files into CodeCenter
 */
#ifndef CenterLoadTarget
#if HasCodeCenter
#define CenterLoadTarget(target,srclist,libs,defines)			@@\
ProgramTargetName(target):: srclist					@@\
	XCOMM load defines srclist libs
#else
#define CenterLoadTarget(target,srclist,libs,defines) /**/
#endif
#endif /* CenterLoadTarget */

/*
 * CenterProgramTarget - generate rules to make CodeCenter read in sources
 * and objects.
 */
#ifndef CenterProgramTarget
#define CenterProgramTarget(program,srclist,objlist,locallibs,syslibs)	@@\
CenterLoadTarget(Concat(debug_,program),srclist,$(EXTRA_LDOPTIONS) $(LOCAL_LDFLAGS) $(LDPRELIB) locallibs $(LDLIBS) syslibs,$(ALLDEFINES)) @@\
									@@\
CenterLoadTarget(Concat(odebug_,program),objlist,$(EXTRA_LDOPTIONS) $(LOCAL_LDFLAGS) $(LDPRELIB) locallibs $(LDLIBS) syslibs,$(ALLDEFINES))
#endif /* CenterProgramTarget */

#ifndef SentinelLinkTarget
#if HasSentinel
#define SentinelLinkTarget(step,program,linklist)			@@\
ProgramTargetName(step.sentinel):					@@\
	RemoveTargetProgram($@)						@@\
	$(CCENVSETUP) $(SENTINEL) $(SENTINELOPTIONS) $(CC) -o program.sentinel $(LDOPTIONS) linklist $(EXTRA_LOAD_FLAGS)
#else
#define SentinelLinkTarget(step,program,linklist) /**/
#endif
#endif /* SentinelLinkTarget */

/*
 * SentinelProgramTarget - generate rules to make Sentinel image
 */
#ifndef SentinelProgramTarget
#if HasSentinel
#define	SentinelProgramTarget(program,deplist,linklist)			@@\
ProgramTargetName(program.sentinel): deplist				@@\
	RemoveTargetProgram($@)						@@\
	$(CCENVSETUP) $(SENTINEL) $(SENTINELOPTIONS) $(CC) -o $@ $(LDOPTIONS) linklist $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean clean.sentinel::							@@\
	RemoveFile(program.sentinel)
#else
#define	SentinelProgramTarget(program,deplist,linklist) /**/
#endif
#endif /* SentinelProgramTarget */

/*
 * SentinelCplusplusProgramTarget - generate rules to make Sentinel image 
 */
#ifndef SentinelCplusplusProgramTarget
#if HasSentinel
#define	SentinelCplusplusProgramTarget(program,deplist,linklist)	@@\
ProgramTargetName(program.sentinel): deplist				@@\
	RemoveTargetProgram($@)						@@\
	$(CXXENVSETUP) $(SENTINEL) $(SENTINELOPTIONS) $(CXX) -o $@ $(CXXLDOPTIONS) linklist $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean clean.sentinel::							@@\
	RemoveFile(program.sentinel)
#else
#define	SentinelCplusplusProgramTarget(program,deplist,linklist) /**/
#endif
#endif /* SentinelCplusplusProgramTarget */

#ifndef PurifyLinkTarget
#if HasPurify
#define PurifyLinkTarget(step,program,linklist)				@@\
ProgramTargetName(step.pure):						@@\
	RemoveTargetProgram($@)						@@\
	$(CCENVSETUP) $(PURIFY) $(PURIFYOPTIONS) $(CC) -o program.pure $(LDOPTIONS) linklist $(EXTRA_LOAD_FLAGS)
#else
#define PurifyLinkTarget(step,program,linklist) /**/
#endif
#endif /* PurifyLinkTarget */

/*
 * PurifyProgramTarget - generate rules to make Purify'ed image
 */
#ifndef PurifyProgramTarget
#if HasPurify
#define	PurifyProgramTarget(program,deplist,linklist)			@@\
ProgramTargetName(program.pure): deplist				@@\
	RemoveTargetProgram($@)						@@\
	$(CCENVSETUP) $(PURIFY) $(PURIFYOPTIONS) $(CC) -o $@ $(LDOPTIONS) linklist $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean clean.pure::							@@\
	RemoveFile(program.pure)
#else
#define	PurifyProgramTarget(program,deplist,linklist) /**/
#endif
#endif /* PurifyProgramTarget */

/*
 * PurifyCplusplusProgramTarget - generate rules to make Purify'ed image
 */
#ifndef PurifyCplusplusProgramTarget
#if HasPurify
#define	PurifyCplusplusProgramTarget(program,deplist,linklist)		@@\
ProgramTargetName(program.pure): deplist				@@\
	RemoveTargetProgram($@)						@@\
	$(CXXENVSETUP) $(PURIFY) $(PURIFYOPTIONS) $(CXX) -o $@ $(CXXLDOPTIONS) linklist $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean clean.pure::							@@\
	RemoveFile(program.pure)
#else
#define	PurifyCplusplusProgramTarget(program,deplist,linklist) /**/
#endif
#endif /* PurifyCplusplusProgramTarget */

#ifndef ProofLinkTarget
#if HasTestCenter
#define ProofLinkTarget(step,program,linklist)				@@\
ProgramTargetName(step.tc):						@@\
	RemoveTargetProgram($@)						@@\
	$(CCENVSETUP) $(PROOF) $(PROOFOPTIONS) $(CC) -o program.tc $(LDOPTIONS) linklist $(EXTRA_LOAD_FLAGS)
#else
#define ProofLinkTarget(step,program,linklist) /**/
#endif
#endif /* ProofLinkTarget */

/*
 * ProofProgramTarget - generate rules to make Proof'ed image
 */
#ifndef ProofProgramTarget
#if HasTestCenter
#define	ProofProgramTarget(program,deplist,linklist)			@@\
ProgramTargetName(program.tc): deplist					@@\
	RemoveTargetProgram($@)						@@\
	$(CCENVSETUP) $(PROOF) $(PROOFOPTIONS) $(CC) -o $@ $(LDOPTIONS) linklist $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean clean.tc::							@@\
	RemoveFiles(program.tc program.tc.*.*)
#else
#define	ProofProgramTarget(program,deplist,linklist) /**/
#endif
#endif /* ProofProgramTarget */

/*
 * ProofCplusplusProgramTarget - generate rules to make Proof'ed image
 */
#ifndef ProofCplusplusProgramTarget
#if HasTestCenter
#define	ProofCplusplusProgramTarget(program,deplist,linklist)		@@\
ProgramTargetName(program.tc): deplist					@@\
	RemoveTargetProgram($@)						@@\
	$(CXXENVSETUP) $(PROOF) $(PROOFOPTIONS) $(CXX) -o $@ $(CXXLDOPTIONS) linklist $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean clean.tc::							@@\
	RemoveFiles(program.tc program.tc.*.*)
#else
#define	ProofCplusplusProgramTarget(program,deplist,linklist) /**/
#endif
#endif /* ProofCplusplusProgramTarget */

#ifndef ProofCleanTarget
#if HasTestCenter
#define ProofCleanTarget()						@@\
clean clean.tc::							@@\
	RemoveFile(-r TC.Cache)
#else
#define ProofCleanTarget() /**/
#endif
#endif /* ProofCleanTarget */

XCOMM The last special vendor target.
XCOMM ---------------------------------------------------------------

/* Put the includes into $(TOP).  This is left over from X11 */
#ifndef BuildIncludesTop
#define BuildIncludesTop(srclist)					@@\
includes::								@@\
	MakeDir($(BUILDINCDIR))						@@\
	@(set -x; cd $(BUILDINCDIR); for i in srclist; do \		@@\
		RemoveFile($$i); \					@@\
		$(LN) $(BUILDINCTOP)/$(CURRENT_DIR)/$$i .; \		@@\
	done)
#endif /* BuildIncludesTop */

/* Put the includes into a subdirectory of $(TOP).  This is left */
/* over from X11 */
#ifndef BuildIncludes
#define BuildIncludes(srclist,dstsubdir,dstupdir)			@@\
includes::								@@\
	MakeDir($(BUILDINCDIR)/dstsubdir)				@@\
	@(set -x; cd $(BUILDINCDIR)/dstsubdir; for i in srclist; do \	@@\
		RemoveFile($$i); \					@@\
		$(LN) $(BUILDINCTOP)/dstupdir/$(CURRENT_DIR)/$$i .; \	@@\
	done)
#endif /* BuildIncludes */

/* Put the interfaces into a subdirectory of $(TOP).  This is left */
/* over from X11 */
#ifndef BuildInterfaces
#define BuildInterfaces(srclist,dstsubdir,dstupdir)			@@\
interfaces::								@@\
	MakeDir($(BUILDINCDIR)/dstsubdir)				@@\
	@(set -x; cd $(BUILDINCDIR)/dstsubdir; for i in srclist; do \	@@\
		RemoveFile($$i); \					@@\
		$(LN) $(BUILDINCTOP)/dstupdir/$(CURRENT_DIR)/$$i .; \	@@\
	done)
#endif /* BuildInterfaces */

XCOMM --------------------------------------------------------------
XCOMM Helpers to link programs.  These are used by the ProgramTargets

/*
 * LinkRule - link a program
 */
#ifndef LinkRule
#define LinkRule(program,options,objlist,libraries) \
	$(CCLINK) -o program options Objects(objlist) \			@@\
		libraries $(EXTRA_LOAD_FLAGS) || RemoveFile(program)	@@\
	@if [ ! -x program ] ; then set -e; \				@@\
		echo Error: program not executable; \			@@\
		RemoveFile(program); \					@@\
		exit 1; else exit 0; fi
	
#endif /* LinkRule */

/*
 * HostLinkRule - link a utility to be used on the build host
 * (differs from LinkRule if cross compiling)
 */
#ifndef HostLinkRule
#define HostLinkRule LinkRule
#endif

#ifndef CplusplusLinkRule
#define CplusplusLinkRule(program,options,objlist,libraries) \
$(CXXLINK) -o program options Objects(objlist) libraries $(EXTRA_LOAD_FLAGS)
#endif /* CplusplusLinkRule */

XCOMM ------------------------------------------------------------
XCOMM ProgramTargets.  This section has the rules to build program
XCOMM targets.  

/*
 * NormalProgramTarget - generate rules to compile and link the indicated 
 * program; since it does not use any default object files, it may be used for
 * multiple programs in the same Imakefile.
 */
#ifndef NormalProgramTarget
#define	NormalProgramTarget(program,objlist,deplibs,locallibs,syslibs)	@@\
.PHONY: program								@@\
									@@\
program: ProgramTargetName(program)					@@\
									@@\
ProgramTargetName(program): Objects(objlist) deplibs			@@\
	RemoveTargetProgram($@)						@@\
	LinkRule($@,$(LDOPTIONS),objlist,locallibs $(LDLIBS) syslibs)	@@\
									@@\
SentinelProgramTarget(program,objlist deplibs,objlist locallibs $(LDLIBS) syslibs) @@\
PurifyProgramTarget(program,objlist deplibs,objlist locallibs $(LDLIBS) syslibs) @@\
ProofProgramTarget(program,objlist deplibs,objlist locallibs $(LDLIBS) syslibs) @@\
									@@\
clean::									@@\
	RemoveFile(ProgramTargetName(program))
#endif /* NormalProgramTarget */


/*
 * NormalCplusplusProgramTarget - Like NormalTargetProgram, but uses
 * C++ linking rules.
 */
#ifndef NormalCplusplusProgramTarget
#define	NormalCplusplusProgramTarget(program,objlist,deplibs,locallibs,syslibs)	@@\
.PHONY: program								@@\
									@@\
program: ProgramTargetName(program)					@@\
									@@\
ProgramTargetName(program): Objects(objlist) deplibs			@@\
	RemoveTargetProgram($@)						@@\
	CplusplusLinkRule($@,$(CXXLDOPTIONS),objlist,locallibs $(LDLIBS) syslibs) @@\
									@@\
SentinelCplusplusProgramTarget(program,objlist deplibs,objlist locallibs $(LDLIBS) syslibs) @@\
PurifyCplusplusProgramTarget(program,objlist deplibs,objlist locallibs $(LDLIBS) syslibs) @@\
ProofCplusplusProgramTarget(program,objlist deplibs,objlist locallibs $(LDLIBS) syslibs) @@\
									@@\
clean::									@@\
	RemoveFile(ProgramTargetName(program))
#endif /* NormalCplusplusProgramTarget */


#ifndef SetUIDProgramTarget
#define SetUIDProgramTarget NormalProgramTarget
#endif


/*
 * SingleProgramTarget - obsolete version of NormalProgramTarget that does
 * not have deplibs.
 */
#ifndef SingleProgramTarget
#define	SingleProgramTarget(program,objlist,locallibs,syslibs)		@@\
NormalProgramTarget(program,objlist,NullParameter,locallibs,syslibs)
#endif /* SingleProgramTarget */

XCOMM ----------------------------------------------------------
XCOMM These are easy interfaces to the ComplexProgramTargets for
XCOMM programs that only have one file.

/*
 * SimpleProgramTarget - generate rules for compiling and linking programs
 * that only have one C source file.  It should only be used in Imakefiles 
 * that describe a single program.
 */
#ifndef SimpleProgramTarget
#define	SimpleProgramTarget(program)					@@\
           OBJS = program.o						@@\
           SRCS = program.c						@@\
									@@\
ComplexProgramTarget(program)
#endif /* SimpleProgramTarget */

#ifndef SimpleCplusplusProgramTarget
#define SimpleCplusplusProgramTarget(program)				@@\
           OBJS = program.o						@@\
           SRCS = program.CCsuf						@@\
									@@\
ComplexCplusplusProgramTarget(program)
#endif /* SimpleCplusplusProgramTarget */

XCOMM ------------------------------------------------------------------
XCOMM The complex program targets.  These are MEGA targets that can
XCOMM only be used in Imakefiles that discribe a single program.  These
XCOMM should be avoided and the normalProgramTarget should be used.

#ifndef ProgramTargetHelper
#define	ProgramTargetHelper(program,srcs,objs,deplib,locallib,syslib)	@@\
ProgramTargetName(program): $(objs) $(deplib)				@@\
	RemoveTargetProgram($@)						@@\
	LinkRule($@,$(LDOPTIONS),$(objs),locallib $(LDLIBS) syslib)	@@\
									@@\
CenterProgramTarget(program,$(srcs),$(objs),locallib,syslib)		@@\
SentinelProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
PurifyProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
ProofProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
									@@\
InstallProgram(program,$(BINDIR))					@@\
InstallManPage(program,$(MANDIR))
#endif /* ProgramTargetHelper */

#ifndef CplusplusProgramTargetHelper
#define	CplusplusProgramTargetHelper(program,srcs,objs,deplib,locallib,syslib) @@\
ProgramTargetName(program): $(objs) $(deplib)				@@\
	RemoveTargetProgram($@)						@@\
	CplusplusLinkRule($@,$(CXXLDOPTIONS),$(objs),locallib $(LDLIBS) syslib) @@\
									@@\
CenterProgramTarget(program,$(srcs),$(objs),locallib,syslib)		@@\
SentinelCplusplusProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
PurifyCplusplusProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
ProofCplusplusProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
									@@\
InstallProgram(program,$(BINDIR))					@@\
InstallManPage(program,$(MANDIR))
#endif /* CplusplusProgramTargetHelper */

/*
 * ComplexProgramTarget - generate rules for compiling and linking the 
 * program specified by $(OBJS) and $(SRCS), installing the program and its
 * man page, and generating dependencies.  It should only be used in 
 * Imakefiles that describe a single program.
 */
#ifndef ComplexProgramTarget
#define	ComplexProgramTarget(program)					@@\
        PROGRAM = program						@@\
									@@\
AllTarget(program)							@@\
									@@\
ProgramTargetHelper(program,SRCS,OBJS,DEPLIBS,$(LOCAL_LIBRARIES),NullParameter) @@\
									@@\
DependTarget()								@@\
LintTarget()								@@\
									@@\
clean::									@@\
	RemoveFile(ProgramTargetName(program))
#endif /* ComplexProgramTarget */

#ifndef ComplexCplusplusProgramTarget
#define	ComplexCplusplusProgramTarget(program)				@@\
        PROGRAM = program						@@\
									@@\
AllTarget(program)							@@\
									@@\
CplusplusProgramTargetHelper(program,SRCS,OBJS,DEPLIBS,$(LOCAL_LIBRARIES),NullParameter) @@\
									@@\
DependTarget()								@@\
LintTarget()								@@\
									@@\
clean::									@@\
	RemoveFile(ProgramTargetName(program))
#endif /* ComplexCplusplusProgramTarget */

/*
 * ComplexProgramTarget_1 - generate rules for compiling and linking the
 * program specified by $(OBJS1) and $(SRCS1), installing the program and its
 * man page, and generating dependencies for it and any programs described
 * by $(SRCS2) and $(SRCS3).  It should be used to build the primary 
 * program in Imakefiles that describe multiple programs.
 */
#ifndef ComplexProgramTarget_1
#define	ComplexProgramTarget_1(program,locallib,syslib)			@@\
            OBJS = $(OBJS1) $(OBJS2) $(OBJS3)				@@\
            SRCS = $(SRCS1) $(SRCS2) $(SRCS3)				@@\
									@@\
AllTarget($(PROGRAMS))							@@\
									@@\
ProgramTargetHelper(program,SRCS1,OBJS1,DEPLIBS1,locallib,syslib)	@@\
									@@\
DependTarget()								@@\
LintTarget()								@@\
									@@\
clean::									@@\
	RemoveFiles($(PROGRAMS))
#endif /* ComplexProgramTarget_1 */

#ifndef ComplexCplusplusProgramTarget_1
#define	ComplexCplusplusProgramTarget_1(program,locallib,syslib)	@@\
            OBJS = $(OBJS1) $(OBJS2) $(OBJS3)				@@\
            SRCS = $(SRCS1) $(SRCS2) $(SRCS3)				@@\
									@@\
AllTarget($(PROGRAMS))							@@\
									@@\
CplusplusProgramTargetHelper(program,SRCS1,OBJS1,DEPLIBS1,locallib,syslib)@@\
									@@\
DependTarget()								@@\
LintTarget()								@@\
									@@\
clean::									@@\
	RemoveFiles($(PROGRAMS))
#endif /* ComplexCplusplusProgramTarget_1 */

/*
 * ComplexProgramTarget_2 - generate rules for compiling and linking the
 * program specified by $(OBJS2) and $(SRCS2) and installing the program and
 * man page.  It should be used to build the second program in Imakefiles 
 * describing more than one program.
 */
#ifndef ComplexProgramTarget_2
#define	ComplexProgramTarget_2(program,locallib,syslib)			@@\
ProgramTargetHelper(program,SRCS2,OBJS2,DEPLIBS2,locallib,syslib)
#endif /* ComplexProgramTarget_2 */

#ifndef ComplexCplusplusProgramTarget_2
#define	ComplexCplusplusProgramTarget_2(program,locallib,syslib)	@@\
CplusplusProgramTargetHelper(program,SRCS2,OBJS2,DEPLIBS2,locallib,syslib)
#endif /* ComplexCplusplusProgramTarget_2 */

/*
 * ComplexProgramTarget_3 - generate rules for compiling and linking the
 * program specified by $(OBJS3) and $(SRCS3) and installing the program and
 * man page.  It should be used to build the third program in Imakefiles 
 * describing more than one program.
 */
#ifndef ComplexProgramTarget_3
#define	ComplexProgramTarget_3(program,locallib,syslib)			@@\
ProgramTargetHelper(program,SRCS3,OBJS3,DEPLIBS3,locallib,syslib)
#endif /* ComplexProgramTarget_3 */

#ifndef ComplexCplusplusProgramTarget_3
#define	ComplexCplusplusProgramTarget_3(program,locallib,syslib)	@@\
CplusplusProgramTargetHelper(program,SRCS3,OBJS3,DEPLIBS3,locallib,syslib)
#endif /* ComplexCplusplusProgramTarget_3 */

XCOMM End of the Complex Program Targets.
XCOMM --------------------------------------------------------------


XCOMM --------------------------------------------------------------
XCOMM Baggage left over from X11.  This was used to build the server.
#ifdef BUILD_X11_SERVER
/*
 * ServerTargetWithFlags - generate rules to compile, link, and relink a server
 */
#ifndef ServerTargetWithFlags
#define	ServerTargetWithFlags(server,subdirs,objlist,libs,syslibs,flags) @@\
AllTarget(server)							@@\
ProgramTargetName(server): subdirs Objects(objlist) libs				@@\
	MoveToBakFile($@)						@@\
	LinkRule($@,$(LDOPTIONS),objlist,libs $(LDLIBS) syslibs) @@\
									@@\
Concat(load,server):							@@\
	MoveToBakFile(ProgramTargetName(server))			@@\
	LinkRule(ProgramTargetName(server),$(LDOPTIONS),objlist,libs $(LDLIBS) syslibs) @@\
									@@\
loadX:: Concat(load,server)						@@\
									@@\
SentinelProgramTarget(server,subdirs objlist libs,objlist libs $(LDLIBS) syslibs) @@\
SentinelLinkTarget(Concat(load,server),server,objlist libs $(LDLIBS) syslibs) @@\
PurifyProgramTarget(server,subdirs objlist libs,objlist libs $(LDLIBS) syslibs) @@\
PurifyLinkTarget(Concat(load,server),server,objlist libs $(LDLIBS) syslibs) @@\
ProofProgramTarget(server,subdirs objlist libs,objlist libs $(LDLIBS) syslibs) @@\
ProofLinkTarget(Concat(load,server),server,objlist libs $(LDLIBS) syslibs) @@\
									@@\
InstallProgramWithFlags(server,$(BINDIR),flags)				@@\
									@@\
clean::									@@\
	RemoveFile(ProgramTargetName(server))
#endif /* ServerTargetWithFlags */

/*
 * ServerTarget - rules to compile, link, and relink a normal server
 */
#ifndef ServerTarget
#define	ServerTarget(server,subdirs,objlist,libs,syslibs)		@@\
ServerTargetWithFlags(server,subdirs,objlist,libs,syslibs,$(_NOOP_))
#endif /* ServerTarget */
#endif /* BUILD_X11_SERVER */


